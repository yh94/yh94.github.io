<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构网址</title>
      <link href="/2022/04/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BD%91%E5%9D%80/"/>
      <url>/2022/04/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BD%91%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h3 id="这是一个可以观察各种数据结构的网址"><a href="#这是一个可以观察各种数据结构的网址" class="headerlink" title="这是一个可以观察各种数据结构的网址"></a>这是一个可以观察各种数据结构的网址</h3><p><a href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html">https://www.cs.usfca.edu/~galles/visualization/RedBlack.html</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QPS、TPS、并发数</title>
      <link href="/2022/04/16/QPS%E3%80%81TPS%E3%80%81%E5%B9%B6%E5%8F%91%E6%95%B0/"/>
      <url>/2022/04/16/QPS%E3%80%81TPS%E3%80%81%E5%B9%B6%E5%8F%91%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-平均响应时长（每个用户请求）"><a href="#1-平均响应时长（每个用户请求）" class="headerlink" title="1. 平均响应时长（每个用户请求）"></a>1. 平均响应时长（每个用户请求）</h1><ul><li>公式：Time token for tests&#x2F;（Complete requests&#x2F;Concurrency Level）</li><li>用户平均请求等待时间 &#x3D; 总耗时 &#x2F;（总请求数 &#x2F; 并发数）<blockquote><p> 结合1、2 &#x3D;&#x3D;&gt; 用户平均请求等待时间 &#x3D; 服务器平均请求等待时间 * 并发数</p></blockquote></li></ul><h1 id="2-服务器平均请求等待时间（每个请求）"><a href="#2-服务器平均请求等待时间（每个请求）" class="headerlink" title="2. 服务器平均请求等待时间（每个请求）"></a>2. 服务器平均请求等待时间（每个请求）</h1><ul><li>公式：总耗时 &#x2F; 总请求数</li></ul><h1 id="3-QPS（每秒能够相应的查询次数）"><a href="#3-QPS（每秒能够相应的查询次数）" class="headerlink" title="3. QPS（每秒能够相应的查询次数）"></a>3. QPS（每秒能够相应的查询次数）</h1><ul><li>公式：QPS &#x3D; 并发数 &#x2F; 平均响应时长<blockquote><p>结合1、3 &#x3D;&#x3D;&gt; QPS &#x3D; 总请求数 &#x2F; 总耗时</p></blockquote></li></ul><h1 id="4-TPS"><a href="#4-TPS" class="headerlink" title="4.TPS"></a>4.TPS</h1><ul><li>每秒钟处理完的事务次数，一般TPS是对整个系统来讲的。一个应用系统1s能完成多少事务处理</li></ul><h1 id="5-并发数（系统同时处理的request-或-事务数）"><a href="#5-并发数（系统同时处理的request-或-事务数）" class="headerlink" title="5. 并发数（系统同时处理的request 或 事务数）"></a>5. 并发数（系统同时处理的request 或 事务数）</h1><ul><li>公式：并发数 &#x3D; QPS * 平均响应时长<blockquote><p>指系统可以同时承载的正常使用系统功能的用户的数量</p></blockquote></li></ul><h1 id="6-吞吐量"><a href="#6-吞吐量" class="headerlink" title="6. 吞吐量"></a>6. 吞吐量</h1><ul><li>F &#x3D; VU * R &#x2F; T</li><li>其中F为吞吐量，VU表示虚拟用户个数，R表示每个虚拟用户发出的请求数，T表示性能测试所用的时间<blockquote><p>一个系统吞吐量通常由QPS(TPS)、并发数两个因素决定，在应用场景访问压力下，只要某一项达到系统最高值或超标，系统超负荷工作、上下文切换、内存等其他消耗导致系统性能下降，系统的吞吐量会下降反而会下降。</p></blockquote></li></ul><h1 id="7-AbTest例子"><a href="#7-AbTest例子" class="headerlink" title="7.AbTest例子"></a>7.AbTest例子</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[root@s1 ~]# ab -c 500 -n 10000 -p POST.json -T application/json  http://10.152.49.33:8080/scrm/searchCustomer</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 10.152.49.33 (be patient)</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Completed 3000 requests</span><br><span class="line">Completed 4000 requests</span><br><span class="line">Completed 5000 requests</span><br><span class="line">Completed 6000 requests</span><br><span class="line">Completed 7000 requests</span><br><span class="line">Completed 8000 requests</span><br><span class="line">Completed 9000 requests</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Finished 10000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:</span><br><span class="line">Server Hostname:        10.152.49.33</span><br><span class="line">Server Port:            8080</span><br><span class="line"></span><br><span class="line">Document Path:          /scrm/searchCustomer</span><br><span class="line">Document Length:        5257 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      500 // 并发数</span><br><span class="line">Time taken for tests:   151.283 seconds // 总耗时</span><br><span class="line">Complete requests:      10000 // 总请求数</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      53620000 bytes</span><br><span class="line">Total body sent:        8030000</span><br><span class="line">HTML transferred:       52570000 bytes</span><br><span class="line">Requests per second:    66.10 [#/sec] (mean)  // QPS</span><br><span class="line">Time per request:       7564.153 [ms] (mean)  // 用户平均请求等待时间</span><br><span class="line">Time per request:       15.128 [ms] (mean, across all concurrent requests) // 服务器平均请求等待时间</span><br><span class="line">Transfer rate:          346.13 [Kbytes/sec] received</span><br><span class="line">                        51.84 kb/s sent</span><br><span class="line">                        397.96 kb/s total</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0   13 112.2      0    1003</span><br><span class="line">Processing:   168 7447 5399.8   5613   34826</span><br><span class="line">Waiting:      168 7447 5399.8   5613   34826</span><br><span class="line">Total:        183 7461 5398.2   5618   34826</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%   5618</span><br><span class="line">  66%   6345</span><br><span class="line">  75%   7057</span><br><span class="line">  80%   7383</span><br><span class="line">  90%  13845</span><br><span class="line">  95%  23104</span><br><span class="line">  98%  25971</span><br><span class="line">  99%  27224</span><br><span class="line"> 100%  34826 (longest request)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8之optionAl用法</title>
      <link href="/2022/04/16/optional/"/>
      <url>/2022/04/16/optional/</url>
      
        <content type="html"><![CDATA[<h1 id="实战使用"><a href="#实战使用" class="headerlink" title="实战使用"></a>实战使用</h1><blockquote><p>以前写法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public String getCity(User user)  throws Exception&#123;</span><br><span class="line">        if(user!=null)&#123;</span><br><span class="line">            if(user.getAddress()!=null)&#123;</span><br><span class="line">                Address address = user.getAddress();</span><br><span class="line">                if(address.getCity()!=null)&#123;</span><br><span class="line">                    return address.getCity();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new Excpetion(&quot;取值错误&quot;); </span><br><span class="line">    &#125;</span><br><span class="line">```    </span><br><span class="line">&gt; JAVA8写法</span><br></pre></td></tr></table></figure><p>public String getCity(User user) throws Exception{<br>    return Optional.ofNullable(user)<br>                   .map(u-&gt; u.getAddress())<br>                   .map(a-&gt;a.getCity())<br>                   .orElseThrow(()-&gt;new Exception(“取指错误”));<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 例二</span><br><span class="line">&gt; 以前写法</span><br></pre></td></tr></table></figure><p>if(user!&#x3D;null){<br>    dosomething(user);<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; JAVA8写法</span><br></pre></td></tr></table></figure><p> Optional.ofNullable(user)<br>    .ifPresent(u-&gt;{<br>        dosomething(u);<br>});</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 例三</span><br><span class="line"></span><br><span class="line">&gt; 以前写法</span><br></pre></td></tr></table></figure><p>public User getUser(User user) throws Exception{<br>    if(user!&#x3D;null){<br>        String name &#x3D; user.getName();<br>        if(“zhangsan”.equals(name)){<br>            return user;<br>        }<br>    }else{<br>        user &#x3D; new User();<br>        user.setName(“zhangsan”);<br>        return user;<br>    }<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; java8写法</span><br></pre></td></tr></table></figure><p>public User getUser(User user) {<br>    return Optional.ofNullable(user)<br>                   .filter(u-&gt;”zhangsan”.equals(u.getName()))<br>                   .orElseGet(()-&gt; {<br>                        User user1 &#x3D; new User();<br>                        user1.setName(“zhangsan”);<br>                        return user1;<br>                   });<br>}</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>find命令</title>
      <link href="/2022/04/16/find%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/04/16/find%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">将当前目录及其子目录下所有文件后缀为 .c 的文件列出来:</span><br><span class="line"># find . -name &quot;*.c&quot;</span><br><span class="line">将当前目录及其子目录中的所有文件列出：</span><br><span class="line"></span><br><span class="line"># find . -type f</span><br><span class="line">将当前目录及其子目录下所有最近 20 天内更新过的文件列出:</span><br><span class="line"></span><br><span class="line"># find . -ctime -20</span><br><span class="line">查找 /var/log 目录中更改时间在 7 日以前的普通文件，并在删除之前询问它们：</span><br><span class="line"></span><br><span class="line"># find /var/log -type f -mtime +7 -ok rm &#123;&#125; \;</span><br><span class="line">查找当前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件：</span><br><span class="line"></span><br><span class="line"># find . -type f -perm 644 -exec ls -l &#123;&#125; \;</span><br><span class="line">查找系统中所有文件长度为 0 的普通文件，并列出它们的完整路径：</span><br><span class="line"></span><br><span class="line"># find / -type f -size 0 -exec ls -l &#123;&#125; \;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis问题排查</title>
      <link href="/2022/04/16/redis%E7%BA%BF%E4%B8%8A%E6%8E%92%E6%9F%A5/"/>
      <url>/2022/04/16/redis%E7%BA%BF%E4%B8%8A%E6%8E%92%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis问题排查"><a href="#Redis问题排查" class="headerlink" title="Redis问题排查"></a>Redis问题排查</h1><ul><li><p>在系统缓慢的情况下，查出是内网带宽暂满的原因导致。通过网络工具查出Redis在高分期使用内网带宽<br>达到300M&#x2F;S，占用总内网带宽的30%，于是对Redis问题进行排查。</p><h1 id="通过RDB工具分析RDB中大Key的情况"><a href="#通过RDB工具分析RDB中大Key的情况" class="headerlink" title="通过RDB工具分析RDB中大Key的情况"></a>通过RDB工具分析RDB中大Key的情况</h1></li><li><p>RDB是redis数据库的快照文件，存储在硬盘上，用于持久化缓存。带宽过高，肯定是大Key的频繁读取<br>导致的，所以要找出Redis中排在前几的大key进行分析，于是乎从网上找到了一款基于Go语言编写的一<br>款RDB分析工具–RDR（<a href="https://github.com/xueqiu/rdr%EF%BC%89%E3%80%82">https://github.com/xueqiu/rdr）。</a><br>通过RDR加载RDB后，分析结果如下：<br><img src="https://note.youdao.com/yws/res/177/619F82B355884E9EBE84E06C327AD989" alt="avatar"></p></li><li><p>可以看到Redis的内存大小、key数量及大小、每个类型的数量、占比等，发现排在前几名的大Key分别<br>是dataDicCache、configCache、sysPage、USER_PERMISSION。存储类型都是Hash，其中<br>dataDicCache、configCache、sysPage在hash表中的数据都1条，但是大小却特别大，其中dataDicCache达到了惊人的918kb。<br>通过Redis的MONITOR日志查看大Key的读取情况<br>语法<br>redis Monitor 命令基本语法如下：</p><blockquote><p>redis 127.0.0.1:6379&gt; MONITOR</p></blockquote></li><li><p>监控后得到的日志如下：<br><img src="https://note.youdao.com/yws/res/180/C4CDD337ED994CF5BA66CAF004805D76" alt="image"></p></li><li><p>通过统计30秒左右的MONITOR日志，发现dataDicCache缓存读取数量巨大。一次900kb，一秒就有上百次。优化掉频繁读取的大Key，减少I&#x2F;O量<br>找到获取缓存的地方，以静态变量来存储，在调用缓存时直接获取变量，不走Redis来获取，刷新缓存时同时刷新静态变量。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>不要将频繁读取的大表存储到一个key中，不管类型是hash还是string，可以将大表拆分成多个key来存储，一次获取只获取一条数据。可以减少大量的IO和反序列化所消耗的时间</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 性能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized和reentrantlock区别</title>
      <link href="/2022/04/16/synchronized%E5%92%8Creentrantlock%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/04/16/synchronized%E5%92%8Creentrantlock%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>1、ReentrantLock 拥有Synchronized相同的并发性和内存语义，此外还多了 锁投票，定时锁等候和中断锁等候</p><pre><code> 线程A和B都要获取对象O的锁定，假设A获取了对象O锁，B将等待A释放对O的锁定， 如果使用 synchronized ，如果A不释放，B将一直等下去，不能被中断 如果 使用ReentrantLock，如果A不释放，可以使B在等待了足够长的时间以后，中断等待，而干别的事情ReentrantLock获取锁定与三种方式：  a)  lock(), 如果获取了锁立即返回，如果别的线程持有锁，当前线程则一直处于休眠状态，直到获取锁b) tryLock(), 如果获取了锁立即返回true，如果别的线程正持有锁，立即返回false；c)**tryLock**(long timeout,[TimeUnit](http://houlinyan.iteye.com/java/util/concurrent/TimeUnit.html &quot;java.util.concurrent 中的枚举&quot;) unit)，   如果获取了锁定立即返回true，如果别的线程正持有锁，会等待参数给定的时间，在等待的过程中，如果获取了锁定，就返回true，如果等待超时，返回false；d) lockInterruptibly:如果获取了锁定立即返回，如果没有获取锁定，当前线程处于休眠状态，直到或者锁定，或者当前线程被别的线程中断</code></pre><p>2、synchronized是在JVM层面上实现的，不但可以通过一些监控工具监控synchronized的锁定，而且在代码执行时出现异常，JVM会自动释放锁定，但是使用Lock则不行，lock是通过代码实现的，要保证锁定一定会被释放，就必须将unLock()放到finally{}中</p><p>3、在资源竞争不是很激烈的情况下，Synchronized的性能要优于ReetrantLock，但是在资源竞争很激烈的情况下，Synchronized的性能会下降几十倍，但是ReetrantLock的性能能维持常态；</p><p>下面内容 是转载 <a href="http://zzhonghe.iteye.com/blog/826162">http://zzhonghe.iteye.com/blog/826162</a></p><p>5.0的多线程任务包对于同步的性能方面有了很大的改进，在原有synchronized关键字的基础上，又增加了ReentrantLock，以及各种Atomic类。了解其性能的优劣程度，有助与我们在特定的情形下做出正确的选择。</p><p>总体的结论先摆出来：</p><p>synchronized：<br>在资源竞争不是很激烈的情况下，偶尔会有同步的情形下，synchronized是很合适的。原因在于，编译程序通常会尽可能的进行优化synchronize，另外可读性非常好，不管用没用过5.0多线程包的程序员都能理解。</p><p>ReentrantLock:<br>ReentrantLock提供了多样化的同步，比如有时间限制的同步，可以被Interrupt的同步（synchronized的同步是不能Interrupt的）等。在资源竞争不激烈的情形下，性能稍微比synchronized差点点。但是当同步非常激烈的时候，synchronized的性能一下子能下降好几十倍。而ReentrantLock确还能维持常态。</p><p>Atomic:<br>和上面的类似，不激烈情况下，性能比synchronized略逊，而激烈的时候，也能维持常态。激烈的时候，Atomic的性能会优于ReentrantLock一倍左右。但是其有一个缺点，就是只能同步一个值，一段代码中只能出现一个Atomic的变量，多于一个同步无效。因为他不能在多个Atomic之间同步。</p><p>所以，我们写同步的时候，优先考虑synchronized，如果有特殊需要，再进一步优化。ReentrantLock和Atomic如果用的不好，不仅不能提高性能，还可能带来灾难。</p><h3 id="补充两者唤醒线程方式-线程切换"><a href="#补充两者唤醒线程方式-线程切换" class="headerlink" title="补充两者唤醒线程方式+线程切换"></a>补充两者唤醒线程方式+线程切换</h3><p>只要线程可以在30到50次自旋里拿到锁,那么Synchronized就不会升级为重量级锁,而等待的线程也就不用被挂起,我们也就少了挂起和唤醒这个上下文切换的过程开销.</p><p>但如果是ReentrantLock呢?不会自旋,而是直接被挂起,这样一来,我们就很容易会多出线程上下文开销的代价.当然,你也可以使用tryLock(),但是这样又出现了一个问题,你怎么知道tryLock的时间呢?在时间范围里还好,假如超过了呢?</p><p>所以,在锁被细化到如此程度上,使用Synchronized是最好的选择了.这里再补充一句,Synchronized和ReentrantLock他们的开销差距是在释放锁时唤醒线程的数量,Synchronized是唤醒锁池里所有的线程+刚好来访问的线程,而ReentrantLock则是当前线程后进来的第一个线程+刚好来访问的线程.</p><p>如果是线程并发量不大的情况下,那么Synchronized因为自旋锁,偏向锁,轻量级锁的原因,不用将等待线程挂起,偏向锁甚至不用自旋,所以在这种情况下要比ReentrantLock高效。</p><h3 id="补充两者为什么默认都是非公平锁"><a href="#补充两者为什么默认都是非公平锁" class="headerlink" title="补充两者为什么默认都是非公平锁"></a>补充两者为什么默认都是非公平锁</h3><p>ReentrantLock公平和非公平锁的队列都基于锁内部维护的一个双向链表，表结点Node的值就是每一个请求当前锁的线程。</p><p>公平锁则在于每次都是依次从队首取值，严格按照线程启动的顺序来执行的，不允许插队。</p><p>非公平锁在等待锁的过程中， 如果有任意新的线程妄图获取锁，都是有很大的几率直接获取到锁的，允许插队。</p><p>默认情况下ReentrantLock是通过非公平锁来进行同步的，包括synchronized关键字都是如此，因为这样性能会更好。因为从线程进入了RUNNABLE状态，可以执行开始，到实际线程执行是要比较久的时间的。而且，在一个锁释放之后，其他的线程会需要重新来获取锁。其中经历了持有锁的线程释放锁，其他线程从挂起恢复到RUNNABLE状态，其他线程请求锁，获得锁，线程执行，这一系列步骤。如果这个时候，存在一个线程直接请求锁，可能就避开挂起到恢复RUNNABLE状态的这段消耗，所以性能更优化。</p><p>本文转自 <a href="https://www.cnblogs.com/fanguangdexiaoyuer/p/5313653.html">https://www.cnblogs.com/fanguangdexiaoyuer/p/5313653.html</a>，如有侵权，请联系删除。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea代码神器</title>
      <link href="/2022/03/16/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6(%E4%BB%A3%E7%A0%81%E7%A5%9E%E5%99%A8)/"/>
      <url>/2022/03/16/%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6(%E4%BB%A3%E7%A0%81%E7%A5%9E%E5%99%A8)/</url>
      
        <content type="html"><![CDATA[<h2 id="Copilot"><a href="#Copilot" class="headerlink" title="Copilot"></a>Copilot</h2><blockquote><p>我愿称之为最强插件。</p></blockquote><p>首先是github copilot的官网地址 ：<a href="https://copilot.github.com/">https://copilot.github.com/</a></p><p>进去之后自己看吧，贼拉牛逼，预判了我。</p>]]></content>
      
      
      <categories>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何保证消息的可靠性传输？（如何处理消息丢失的问题）</title>
      <link href="/2022/02/16/rabbitmq%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF/"/>
      <url>/2022/02/16/rabbitmq%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>这个是肯定的，用 MQ 有个基本原则，就是数据不能多一条，也不能少一条，不能多，就是重复消费和幂等性问题。不能少，就是说这数据别搞丢了。那这个问题你必须得考虑一下。</p><p>如果说你这个是用 MQ 来传递非常核心的消息，比如说计费、扣费的一些消息，那必须确保这个 MQ 传递过程中绝对不会把计费消息给弄丢。</p><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="生产者弄丢了数据"><a href="#生产者弄丢了数据" class="headerlink" title="生产者弄丢了数据"></a>生产者弄丢了数据</h2><p>生产者将数据发送到 RabbitMQ 的时候，可能数据就在半路给搞丢了，因为网络问题啥的，都有可能。</p><p>此时可以选择用 RabbitMQ 提供的事务功能，就是生产者发送数据之前开启 RabbitMQ 事务 <code>channel.txSelect</code> ，然后发送消息，如果消息没有成功被 RabbitMQ 接收到，那么生产者会收到异常报错，此时就可以回滚事务 <code>channel.txRollback</code> ，然后重试发送消息；如果收到了消息，那么可以提交事务 <code>channel.txCommit</code> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 开启事务</span><br><span class="line">channel.txSelect</span><br><span class="line">try &#123;</span><br><span class="line">    // 这里发送消息</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    channel.txRollback</span><br><span class="line"></span><br><span class="line">    // 这里再次重发这条消息</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 提交事务</span><br><span class="line">channel.txCommit</span><br></pre></td></tr></table></figure><p>但是问题是，RabbitMQ 事务机制（同步）一搞，基本上<strong>吞吐量会下来，因为太耗性能</strong>。</p><p>所以一般来说，如果你要确保说写 RabbitMQ 的消息别丢，可以开启 <code>confirm</code> 模式，在生产者那里设置开启 confirm 模式之后，你每次写的消息都会分配一个唯一的 <code>id</code>，然后如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个 <code>ack</code> 消息，告诉你说这个消息 ok 了。如果 RabbitMQ 没能处理这个消息，会回调你的一个 <code>nack</code> 接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息 id 的状态，如果超过一定时间还没接收到这个消息的回调，那么你可以重发。</p><p>事务机制和 <code>confirm</code> 机制最大的不同在于，事务机制是同步的，你提交一个事务之后会阻塞在那儿，但是 <code>confirm</code> 机制是异步的，你发送个消息之后就可以发送下一个消息，然后那个消息 RabbitMQ 接收了之后会异步回调你的一个接口通知你这个消息接收到了。</p><p>所以一般在生产者这块避免数据丢失，都是用 <code>confirm</code> 机制的。</p><h2 id="RabbitMQ-弄丢了数据"><a href="#RabbitMQ-弄丢了数据" class="headerlink" title="RabbitMQ 弄丢了数据"></a>RabbitMQ 弄丢了数据</h2><p>就是 RabbitMQ 自己弄丢了数据，这个你必须开启 RabbitMQ 的持久化，就是消息写入之后会持久化到磁盘，哪怕是 RabbitMQ 自己挂了，恢复之后会自动读取之前存储的数据，一般数据不会丢。除非极其罕见的是，RabbitMQ 还没持久化，自己就挂了，可能导致少量数据丢失，但是这个概率较小。</p><p>设置持久化有两个步骤：</p><ul><li>创建 queue 的时候将其设置为持久化。这样就可以保证 RabbitMQ 持久化 queue 的元数据，但是它是不会持久化 queue 里的数据的。</li><li>第二个是发送消息的时候将消息的 deliveryMode 设置为 2。就是将消息设置为持久化的，此时 RabbitMQ 就会将消息持久化到磁盘上去。</li></ul><p>必须要同时设置这两个持久化才行，RabbitMQ 哪怕是挂了，再次重启，也会从磁盘上重启恢复 queue，恢复这个 queue 里的数据。</p><p>注意，哪怕是你给 RabbitMQ 开启了持久化机制，也有一种可能，就是这个消息写到了 RabbitMQ 中，但是还没来得及持久化到磁盘上，结果不巧，此时 RabbitMQ 挂了，就会导致内存里的一点点数据丢失。</p><p>所以，持久化可以跟生产者那边的 <code>confirm</code> 机制配合起来，只有消息被持久化到磁盘之后，才会通知生产者 <code>ack</code> 了，所以哪怕是在持久化到磁盘之前，RabbitMQ 挂了，数据丢了，生产者收不到 <code>ack</code> ，你也是可以自己重发的。</p><h2 id="消费端弄丢了数据"><a href="#消费端弄丢了数据" class="headerlink" title="消费端弄丢了数据"></a>消费端弄丢了数据</h2><p>RabbitMQ 如果丢失了数据，主要是因为你消费的时候，刚消费到，还没处理，结果进程挂了，比如重启了，那么就尴尬了，RabbitMQ 认为你都消费了，这数据就丢了。</p><p>这个时候得用 RabbitMQ 提供的 ack 机制，简单来说，就是你必须关闭 RabbitMQ 的自动 ack ，可以通过一个 api 来调用就行，然后每次你自己代码里确保处理完的时候，再在程序里 ack 一把。这样的话，如果你还没处理完，不就没有 ack 了？那 RabbitMQ 就认为你还没处理完，这个时候 RabbitMQ 会把这个消费分配给别的 consumer 去处理，消息是不会丢的。</p><h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><h2 id="消费端弄丢了数据-1"><a href="#消费端弄丢了数据-1" class="headerlink" title="消费端弄丢了数据"></a>消费端弄丢了数据</h2><p>唯一可能导致消费者弄丢数据的情况，就是说，你消费到了这个消息，然后消费者那边自动提交了 offset，让 Kafka 以为你已经消费好了这个消息，但其实你才刚准备处理这个消息，你还没处理，你自己就挂了，此时这条消息就丢咯。</p><p>这不是跟 RabbitMQ 差不多吗，大家都知道 Kafka 会自动提交 offset，那么只要关闭自动提交 offset，在处理完之后自己手动提交 offset，就可以保证数据不会丢。但是此时确实还是可能会有重复消费，比如你刚处理完，还没提交 offset，结果自己挂了，此时肯定会重复消费一次，自己保证幂等性就好了。</p><p>生产环境碰到的一个问题，就是说我们的 Kafka 消费者消费到了数据之后是写到一个内存的 queue 里先缓冲一下，结果有的时候，你刚把消息写入内存 queue，然后消费者会自动提交 offset。然后此时我们重启了系统，就会导致内存 queue 里还没来得及处理的数据就丢失了。</p><h2 id="Kafka-弄丢了数据"><a href="#Kafka-弄丢了数据" class="headerlink" title="Kafka 弄丢了数据"></a>Kafka 弄丢了数据</h2><p>这块比较常见的一个场景，就是 Kafka 某个 broker 宕机，然后重新选举 partition 的 leader。大家想想，要是此时其他的 follower 刚好还有些数据没有同步，结果此时 leader 挂了，然后选举某个 follower 成 leader 之后，不就少了一些数据？这就丢了一些数据啊。</p><p>生产环境也遇到过，我们也是，之前 Kafka 的 leader 机器宕机了，将 follower 切换为 leader 之后，就会发现说这个数据就丢了。</p><p>所以此时一般是要求起码设置如下 4 个参数：</p><p>给 topic 设置 replication.factor 参数：这个值必须大于 1，要求每个 partition 必须有至少 2 个副本。<br>在 Kafka 服务端设置 min.insync.replicas 参数：这个值必须大于 1，这个是要求一个 leader 至少感知到有至少一个 follower 还跟自己保持联系，没掉队，这样才能确保 leader 挂了还有一个 follower 吧。<br>在 producer 端设置 acks&#x3D;all ：这个是要求每条数据，必须是写入所有 replica 之后，才能认为是写成功了。<br>在 producer 端设置 retries&#x3D;MAX （很大很大很大的一个值，无限次重试的意思）：这个是要求一旦写入失败，就无限重试，卡在这里了。<br>我们生产环境就是按照上述要求配置的，这样配置之后，至少在 Kafka broker 端就可以保证在 leader 所在 broker 发生故障，进行 leader 切换时，数据不会丢失。</p><h2 id="生产者会不会弄丢数据？"><a href="#生产者会不会弄丢数据？" class="headerlink" title="生产者会不会弄丢数据？"></a>生产者会不会弄丢数据？</h2><p>如果按照上述的思路设置了 acks&#x3D;all ，一定不会丢，要求是，你的 leader 接收到消息，所有的 follower 都同步到了消息之后，才认为本次写成功了。如果没满足这个条件，生产者会自动不断的重试，重试无限次。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 消息中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>explain详解</title>
      <link href="/2021/07/16/explain%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/07/16/explain%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL-Explain详解"><a href="#MySQL-Explain详解" class="headerlink" title="MySQL Explain详解"></a>MySQL Explain详解</h2><p>[TOC]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//查询叫张三的人</span><br><span class="line">explain select * from emo where name = &#x27;张三&#x27;</span><br></pre></td></tr></table></figure><p><img src="/'./img/img.png'" alt="image.png"></p><h3 id="expain出来的信息有10列，分别是id、select-type、table、type、possible-keys、key、key-len、ref、rows、Extra"><a href="#expain出来的信息有10列，分别是id、select-type、table、type、possible-keys、key、key-len、ref、rows、Extra" class="headerlink" title="expain出来的信息有10列，分别是id、select_type、table、type、possible_keys、key、key_len、ref、rows、Extra"></a>expain出来的信息有10列，分别是id、select_type、table、type、possible_keys、key、key_len、ref、rows、Extra</h3><p>概要描述：</p><ul><li><p>id:  选择标识符</p></li><li><p>select_type: 表示查询的类型。</p></li><li><p>table: 输出结果集的表</p></li><li><p>partitions: 匹配的分区</p></li><li><p>type: 表示表的连接类型</p></li><li><p>possible_keys: 表示查询时，可能使用的索引</p></li><li><p>key: 表示实际使用的索引</p></li><li><p>key_len: 索引字段的长度</p></li><li><p>ref: 列与索引的比较</p></li><li><p>rows: 扫描出的行数(估算的行数)</p></li><li><p>filtered: 按表条件过滤的行百分比</p></li><li><p>Extra: 执行情况的描述和说明</p><h3 id="1、id"><a href="#1、id" class="headerlink" title="1、id"></a>1、<em>id</em></h3><blockquote><p>SELECT识别符。这是SELECT的查询序列号<br>我的理解是SQL执行的顺序的标识，SQL从大到小的执行。</p></blockquote><h3 id="2、select-type"><a href="#2、select-type" class="headerlink" title="2、select_type"></a>2、<em>select_type</em></h3><blockquote><p> 示查询中每个select子句的类型</p></blockquote></li><li><p>SIMPLE(简单SELECT，不使用UNION或子查询等)</p></li><li><p>PRIMARY(子查询中最外层查询，查询中若包含任何复杂的子部分，最外层的select被标记为PRIMARY)</p></li><li><p>UNION(UNION中的第二个或后面的SELECT语句)</p></li><li><p>DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)</p></li><li><p>UNION RESULT(UNION的结果，union语句中第二个select开始后面所有select)</p></li><li><p>SUBQUERY(子查询中的第一个SELECT，结果不依赖于外部查询)</p></li><li><p>DEPENDENT SUBQUERY(子查询中的第一个SELECT，依赖于外部查询)</p></li><li><p>DERIVED(派生表的SELECT, FROM子句的子查询)</p></li><li><p>UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)</p><h3 id="3、table"><a href="#3、table" class="headerlink" title="3、table"></a>3、table</h3><blockquote><p>显示这一步所访问数据库中表名称（显示这一行的数据是关于哪张表的），有时不是真实的表名字，可能是简称，例如上面的e，d，也可能是第几步执行的结果的简称</p></blockquote><h3 id="4、type"><a href="#4、type" class="headerlink" title="4、type"></a>4、type</h3><blockquote><p>表访问方式，表示MySQL在表中找到所需行的方式，又称“访问类型”。<br>常用的类型有： ALL、index、range、ref、eq_ref、const、system、NULL（从左到右，性能从差到好）</p></blockquote></li><li><p>ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行</p></li><li><p>index: Full Index Scan，index与ALL区别为index类型只遍历索引树</p></li><li><p>range:只检索给定范围的行，使用一个索引来选择行</p></li><li><p>ref: 表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p></li><li><p>eq_ref: 类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件</p></li><li><p>const、system: 当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量，system是const类型的特例，当查询的表只有一行的情况下，使用system</p></li><li><p>NULL: MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。</p><h3 id="5、possible-keys"><a href="#5、possible-keys" class="headerlink" title="5、possible_keys"></a>5、possible_keys</h3><blockquote><p>指出MySQL**&#x3D;&#x3D;能使用哪个索引在表中找到记录&#x3D;&#x3D;**，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用（该查询可以利用的索引，如果没有任何索引显示 null）该列完全独立于EXPLAIN输出所示的表的次序。这意味着在possible_keys中的某些键实际上不能按生成的表次序使用。如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询</p></blockquote><h3 id="6、Key"><a href="#6、Key" class="headerlink" title="6、Key"></a>6、Key</h3><blockquote><p>key列显示MySQL实际决定使用的键（索引），必然包含在possible_keys中<br>如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。</p></blockquote><h3 id="7、key-len"><a href="#7、key-len" class="headerlink" title="7、key_len"></a>7、key_len</h3><blockquote><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（<strong>key_len</strong>显示的值为索引字段的<strong>最大可能长度</strong>，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）<br>不损失精确性的情况下，<strong>长度越短越好</strong></p></blockquote><h3 id="8、ref"><a href="#8、ref" class="headerlink" title="8、ref"></a>8、ref</h3><blockquote><p>列与索引的比较，表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p></blockquote><h3 id="9、rows"><a href="#9、rows" class="headerlink" title="9、rows"></a>9、rows</h3><blockquote><p>估算出结果集行数，表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</p></blockquote><h3 id="10、Extra"><a href="#10、Extra" class="headerlink" title="10、Extra"></a>10、Extra</h3><blockquote><p>该列包含MySQL解决查询的详细信息,有以下几种情况</p></blockquote></li><li><p>Using where:不用读取表中所有信息，仅通过索引就可以获取所需数据，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示mysql服务器将在存储引擎检索行后再进行过滤</p></li><li><p>Using temporary：表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询，常见 group by ; order by</p></li><li><p>Using filesort：当Query中包含 order by 操作，而且无法利用索引完成的排序操作称为“文件排序”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 测试Extra的filesort</span><br><span class="line">explain select * from emp order by name;</span><br></pre></td></tr></table></figure></li><li><p>Using join buffer：改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。</p></li><li><p>Impossible where：这个值强调了where语句会导致没有符合条件的行（通过收集统计信息不可能存在结果）。</p></li><li><p>Select tables optimized away：这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行</p></li><li><p>No tables used：Query语句中使用from dual 或不含任何from子句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-- explain select now() from dual;</span><br></pre></td></tr></table></figure></li></ul><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul><li>EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况</li><li>EXPLAIN不考虑各种Cache</li><li>EXPLAIN不能显示MySQL在执行查询时所作的优化工作</li><li>部分统计信息是估算的，并非精确值</li><li>EXPALIN只能解释SELECT操作，其他操作要重写为SELECT后查看执行计。</li><li>通过收集统计信息不可能存在结果</li></ul>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
          <category> sql调优 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> sql调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis底层数据结构</title>
      <link href="/2021/03/10/Redis%E5%85%AD%E7%A7%8D%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2021/03/10/Redis%E5%85%AD%E7%A7%8D%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><a href="about:blank#_2">一、简单动态字符串</a></li><li><ul><li><a href="about:blank#1SDS_4">1、SDS的结构定义</a></li></ul></li><li><a href="about:blank#2SDSc_11">2、SDS和c字符串的区别</a></li><li><ul><li><a href="about:blank#1SDS_12">1）SDS获取字符串长度复杂度为常数</a></li></ul></li><li><a href="about:blank#2SDS_15">2）SDS杜绝了缓冲区溢出</a></li><li><a href="about:blank#3_18">3）减少内存重分配次数</a></li><li><a href="about:blank#4_26">4）二进制安全</a></li><li><a href="about:blank#5SDSc_28">5）SDS兼容部分c字符串函数</a></li><li><a href="about:blank#_31">二、双向链表</a></li><li><ul><li><a href="about:blank#1_32">1、双向链表结构：</a></li></ul></li><li><a href="about:blank#2_34">2、链表节点结构：</a></li><li><a href="about:blank#3Redis_36">3、Redis的链表实现的特性：</a></li><li><a href="about:blank#_42">三、字典</a></li><li><ul><li><a href="about:blank#1_46">1、字典的实现结构</a></li></ul></li><li><ul><li><a href="about:blank#1_49">1）哈希表节点</a></li></ul></li><li><a href="about:blank#2_55">2）哈希表</a></li><li><a href="about:blank#3_61">3）字典</a></li><li><a href="about:blank#2_70">2、哈希算法</a></li><li><ul><li><a href="about:blank#MurmurHash2_73">MurmurHash2算法</a></li></ul></li><li><a href="about:blank#3rehash_76">3、哈希表的重新散列（rehash）</a></li><li><a href="about:blank#_93">四、跳跃表</a></li><li><ul><li><a href="about:blank#1zskiplistNode_97">1、跳跃表节点的结构（zskiplistNode）</a></li></ul></li><li><a href="about:blank#2zskiplist_108">2、跳跃表的结构（zskiplist）</a></li><li><a href="about:blank#_117">五、整数集合</a></li><li><ul><li><a href="about:blank#1_119">1、整数集合的结构</a></li></ul></li><li><a href="about:blank#2_125">2、整数集合的升级</a></li><li><a href="about:blank#_135">六、压缩列表</a></li><li><ul><li><a href="about:blank#1_137">1、压缩列表的构成</a></li></ul></li><li><a href="about:blank#2_147">2、压缩列表节点的结构</a></li><li><a href="about:blank#3_153">3、连锁更新</a></li></ul><p>本文将详细介绍Redis的六种底层数据结构：简单动态字符串、双向链表、字典、跳跃表、整数集合和压缩列表。</p><h1 id="一、简单动态字符串"><a href="#一、简单动态字符串" class="headerlink" title="一、简单动态字符串"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>一、简单动态字符串</h1><p>Redis没有直接使用c语言传统的字符串表示，而是自己构建了一种名为简单动态字符串的可以被修改的抽象类型，并将SDS用作Redis的默认字符串表示。</p><h2 id="1、SDS的结构定义"><a href="#1、SDS的结构定义" class="headerlink" title="1、SDS的结构定义"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>1、SDS的结构定义</h2><p>SDS结构定义如下：<br><img src="https://img-blog.csdnimg.cn/20190416200836643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FiZWxfTGl1amlucXVhbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注：<br>free属性的值为0，表示这个SDS没有分配任何未使用空间。<br>len属性的值为5，表示这个SDS保存了一个五字节长的字符串。<br>buf属性是一个char类型的数组，数组最后保存了空字符‘\0’。</p><h2 id="2、SDS和c字符串的区别"><a href="#2、SDS和c字符串的区别" class="headerlink" title="2、SDS和c字符串的区别"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>2、SDS和c字符串的区别</h2><h3 id="1）SDS获取字符串长度复杂度为常数"><a href="#1）SDS获取字符串长度复杂度为常数" class="headerlink" title="1）SDS获取字符串长度复杂度为常数"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>1）SDS获取字符串长度复杂度为常数</h3><p>SDS通过获取len属性就可以得到字符串的长度，时间复杂度为： O ( 1 ) O(1) O(1)<br>c字符串需要遍历字符串，时间复杂度为： O ( N ) O(N) O(N)</p><h3 id="2）SDS杜绝了缓冲区溢出"><a href="#2）SDS杜绝了缓冲区溢出" class="headerlink" title="2）SDS杜绝了缓冲区溢出"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>2）SDS杜绝了缓冲区溢出</h3><p>c字符串如果没有重新分配空间，直接修改字符串的话，可能会造成数据溢出。<br>当SDS的API需要对SDS进行修改时，API会先检查SDS的空间是否满足修改所需的需求，如果不满足，则自动将SDS空间扩展至所需大小。</p><h3 id="3）减少内存重分配次数"><a href="#3）减少内存重分配次数" class="headerlink" title="3）减少内存重分配次数"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>3）减少内存重分配次数</h3><p>SDS通过空间预分配和惰性空间释放两种优化策略来减少内存重分配次数。</p><ul><li>空间预分配<br>Redis通过额外分配未使用的空间，优化了SDS的字符串增长操作，减少了连续执行字符串增长操作所需的内存分配次数。</li><li>惰性空间释放<br>惰性空间释放用于优化SDS的字符串缩短操作。当SDS缩短时，程序并不会立即回收缩短后多出来的空间，而是使用free属性将这些字节的数量记录起来，等待将来使用<br>注：如果需要真正地释放SDS的未使用空间，我们可以使用相应的API。</li></ul><h3 id="4）二进制安全"><a href="#4）二进制安全" class="headerlink" title="4）二进制安全"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>4）二进制安全</h3><p>SDS API会以处理二进制的方式来处理SDS存放在buf数组里的数据，程序不会对其中的数据做任何的限制、过滤或者假设，所以SDS的API都是二进制安全的。</p><h3 id="5）SDS兼容部分c字符串函数"><a href="#5）SDS兼容部分c字符串函数" class="headerlink" title="5）SDS兼容部分c字符串函数"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>5）SDS兼容部分c字符串函数</h3><p>SDS之所以在末尾保存一个空字符’\0’，是为了使用一些c字符串&lt;string.h&gt;函数库，避免不必要的代码重复。<br>例如 字符串对比函数：&lt;string.h&gt;&#x2F;strcasecmp函数</p><h1 id="二、双向链表"><a href="#二、双向链表" class="headerlink" title="二、双向链表"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>二、双向链表</h1><h2 id="1、双向链表结构："><a href="#1、双向链表结构：" class="headerlink" title="1、双向链表结构："></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>1、双向链表结构：</h2><p><img src="https://img-blog.csdnimg.cn/2019041620100646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FiZWxfTGl1amlucXVhbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2、链表节点结构："><a href="#2、链表节点结构：" class="headerlink" title="2、链表节点结构："></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>2、链表节点结构：</h2><p><img src="https://img-blog.csdnimg.cn/20190416201057683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FiZWxfTGl1amlucXVhbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3、Redis的链表实现的特性："><a href="#3、Redis的链表实现的特性：" class="headerlink" title="3、Redis的链表实现的特性："></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>3、Redis的链表实现的特性：</h2><ul><li>双端</li><li>无环</li><li>带表头指针和表尾指针</li><li>带链表长度计数器</li><li>多态（保存各种不同类型的值）</li></ul><h1 id="三、字典"><a href="#三、字典" class="headerlink" title="三、字典"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>三、字典</h1><p>字典，又被称为符号表、关联数组或映射，是一种用于保存键值对的抽象数据结构。<br>字典中的每个键都是独一无二的，程序可以在字典中根据键查找与之关联的值，或者通过键来更新值，又或者根据键来删除整个键值对，等等。<br>字典用途：Redis数据库底层实现、哈希键底层实现。</p><h2 id="1、字典的实现结构"><a href="#1、字典的实现结构" class="headerlink" title="1、字典的实现结构"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>1、字典的实现结构</h2><p>Redis的字典使用哈希表作为底层实现，一个哈希表里面可以有多个哈希表节点，而每个哈希表节点就保存了字典中的一个键值对。<br>接下来的三个小节将分别介绍Redis的哈希表节点、哈希表以及字典的实现。</p><h3 id="1）哈希表节点"><a href="#1）哈希表节点" class="headerlink" title="1）哈希表节点"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>1）哈希表节点</h3><p><img src="https://img-blog.csdnimg.cn/20190416204526782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FiZWxfTGl1amlucXVhbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>key属性保存着键值对中的键；</li><li>v属性保存着键值对中的值，其中值用union定义，支持三种数据类型。</li><li>next属性是指向另一个哈希表节点的指针，这个指针可以将多个哈希值相同的键值对连接在一起，以此来解决键冲突的问题。</li></ul><h3 id="2）哈希表"><a href="#2）哈希表" class="headerlink" title="2）哈希表"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>2）哈希表</h3><p><img src="https://img-blog.csdnimg.cn/2019041620504380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FiZWxfTGl1amlucXVhbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>table属性是一个数组，数组中的每个元素都是一个指向哈希表节点的指针，每个节点都保存着一个键值对；</li><li>size属性记录了哈希表的大小，也就是table数组的大小；</li><li>sizemask属性的值总是等于size-1，这个属性和哈希值一起决定一个键应该被放到table数组的那个索引上面；</li><li>used属性记录了哈希表目前已有节点的数量。</li></ul><h3 id="3）字典"><a href="#3）字典" class="headerlink" title="3）字典"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>3）字典</h3><p><img src="https://img-blog.csdnimg.cn/20190416205910583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FiZWxfTGl1amlucXVhbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>type属性是一个指向dictType结构的指针，每个dictType结构保存了一簇用于操作特定类型键值对的函数；</li><li>privdata属性保存了需要传给那些类型特定函数的可选参数；</li><li>ht属性是一个包含两个项的数组，数组中的每个项都是一个dictht哈希表，ht[1]只有在对ht[0]哈希表进行rehash操作时使用；</li><li>trehashidx属性是rehash索引，没有进行rehash操作时值都为-1.</li></ul><p>字典、哈希表和哈希表节点关系图：<br><img src="https://img-blog.csdnimg.cn/20190416211628239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FiZWxfTGl1amlucXVhbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2、哈希算法"><a href="#2、哈希算法" class="headerlink" title="2、哈希算法"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>2、哈希算法</h2><p>当要将一个新的键值对添加到字典里面时，程序需要先根据键值对的键计算出哈希值和索引值，然后再根据索引值，将包含新键值对的哈希表节点放到哈希表数组的指定索引上。<br>若果字典被用做数据库的底层实现，或者哈希键的底层实现时，Redis使用MurmurHash2算法来计算键的哈希值。</p><h3 id="MurmurHash2算法"><a href="#MurmurHash2算法" class="headerlink" title="MurmurHash2算法"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>MurmurHash2算法</h3><p>MurmurHash2算法用来计算键的哈希值，特点是运算性能高，碰撞率低。<br>详细参考：<a href="https://blog.csdn.net/thinkmo/article/details/26833565">https://blog.csdn.net/thinkmo/article/details/26833565</a></p><h2 id="3、哈希表的重新散列（rehash）"><a href="#3、哈希表的重新散列（rehash）" class="headerlink" title="3、哈希表的重新散列（rehash）"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>3、哈希表的重新散列（rehash）</h2><p>随着操作的不断执行，哈希表保存的键值对会主键增多或者减少，当哈希表保存的键值对数量太多或者太少时，程序需要对哈希表的大小进行相应的扩展或者收缩。<br>扩展和收缩哈希表的工作可以通过执行rehash（重新散列）操作来完成，步骤如下：</p><p><strong>1）为字典的ht[1]哈希表分配空间，空间大小根据实际情况而定；</strong></p><p><strong>2）将ht[0]中所有键值对rehash到ht[1]中</strong><br>注意：rehash指的是重新计算键的哈希值和索引值，然后将键值对放置到ht[1]哈希表的指定位置上</p><p><strong>3）释放ht[0]，将ht[1]设置为ht[0]，并在ht[1]新建一个空表，为下次rehash做准备</strong><br>rehash操作的结构变化如下：</p><p><img src="https://img-blog.csdnimg.cn/20190417091847145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FiZWxfTGl1amlucXVhbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注：<br>rehash操作是渐进式的。<br>渐进式的rehash将rehash键值对所需的计算工作均摊到对字典的每个添加、删除、查找和更新操作上。<br>之所以这样做，是考虑到如果哈希表保存的键值对的数量是百万级甚至千万级时，一次性进行rehash可能会导致服务器停止服务，渐进式地rehash避免了对服务器性能造成影响。</p><h1 id="四、跳跃表"><a href="#四、跳跃表" class="headerlink" title="四、跳跃表"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>四、跳跃表</h1><p>跳跃表是一种有序数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的。<br>Redis使用跳跃表作为有序集合键的底层实现之一，如果一个有序集合包含的元素数量比较多，又或者有序集合中元素的成员是比较长的字符串时，Redis就会使用跳跃表来作为有序集合键的底层实现。<br>Redis只在两个地方用到了跳跃表，一个是实现有序集合键，另一个是在集群结点中用作内部数据结构，除此之外，跳跃表没有其他用途。</p><h2 id="1、跳跃表节点的结构（zskiplistNode）"><a href="#1、跳跃表节点的结构（zskiplistNode）" class="headerlink" title="1、跳跃表节点的结构（zskiplistNode）"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>1、跳跃表节点的结构（zskiplistNode）</h2><p><img src="https://img-blog.csdnimg.cn/20190417212726757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FiZWxfTGl1amlucXVhbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><strong>层</strong>：跳跃表节点的 level[] 数组可以包含多个元素，每个元素都包含一个指向其他节点的指针 和 跨度，下标从0开始为第一层；</li><li><strong>前进指针</strong>：每个层都有一个指向表尾方向的前进指针，用于从表头向表尾方向访问节点；</li><li><strong>跨度</strong>：层的跨度用于记录两个节点之间的距离，指向NULL的所有前进指针的跨度为0；跨度用来计算节点的排位：在查找某个节点的过程中，将沿途访问过的所有层的跨度累计起来，得到的结果就是目标节点在跳跃表中的排位。</li><li><strong>后退指针</strong>：后退指针用于从表尾向表头方向访问节点，每次只能后退一个节点；</li><li><strong>分值和成员</strong>：<br>分值：一个double类型的浮点数，所有节点都按照分值从小到大排序，多个节点可以包含相同的分值；<br>成员：一个指针，指向一个字符串对象，该字符串对象保存着一个SDS值，成员对象必须是唯一的。</li></ul><h2 id="2、跳跃表的结构（zskiplist）"><a href="#2、跳跃表的结构（zskiplist）" class="headerlink" title="2、跳跃表的结构（zskiplist）"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>2、跳跃表的结构（zskiplist）</h2><p>仅靠过个跳跃表节点就可以组成一个跳跃表，但通过使用一个zskiplist结构来持有这些节点，就可以很方便地对整个跳跃表进行处理。<br>zskiplist结构如图：<img src="https://img-blog.csdnimg.cn/20190417215602606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FiZWxfTGl1amlucXVhbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>header和tail指针分别指向跳跃表的表头和表尾节点；</li><li>length属性记录节点的数量；</li><li>level属性记录层数最高的几点的层数量；</li></ul><p>下图分别展示了完整的跳跃表和单个节点的详细结构图：<br><img src="https://img-blog.csdnimg.cn/20190417222432637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FiZWxfTGl1amlucXVhbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="五、整数集合"><a href="#五、整数集合" class="headerlink" title="五、整数集合"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>五、整数集合</h1><p>整数集合是Redis用于保存整数值的集合抽象数据结构，它可以保存类型为 int16_t 、int32_t 或者 int64_t 的整数值，并且保证集合中不出现重复值。</p><h2 id="1、整数集合的结构"><a href="#1、整数集合的结构" class="headerlink" title="1、整数集合的结构"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>1、整数集合的结构</h2><p><img src="https://img-blog.csdnimg.cn/20190417224045599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FiZWxfTGl1amlucXVhbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><strong>encoding</strong>：contents数组中元素的类型，有 INTSET_ENC_INT16、INTSET_ENC_INT32 和 INTSET_ENC_INT64 三种，分别表示contents数组中元素类型为 int16_t（16位二进制）、int32_t 和 int64_t 类型。</li><li><strong>contents</strong>：整数集合的每个元素都是contents数组的一个数组项，各个项在数组中按值的大小从小到大有序地排列，数组中不包含重复项。</li><li><strong>length</strong>：记录了整数集合包含的元素数量。<br><img src="https://img-blog.csdnimg.cn/20190418131716416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FiZWxfTGl1amlucXVhbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="2、整数集合的升级"><a href="#2、整数集合的升级" class="headerlink" title="2、整数集合的升级"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>2、整数集合的升级</h2><p>如果我们想要添加一个新元素到整数集合里面，但是新元素的类型比整数集合原有的元素类型都要长时，我们就要对整数集合进行升级，然后才能将新元素添加到整数集合里面。<br>另外，还需注意，Redis的整数集合不支持降级。</p><p><strong>升级整数集合并添加新元素共分为三步进行：</strong><br>1）根据新元素的类型，扩展整数集合底层数组的空间大小，并为新元素分配空间。<br>2）将底层数组现有的所有元素都转换成与新元素相同的类型，并将类型转换后的元素继续维持底层数组的有序性质不变。<br>3）将新元素添加到底层数组里面。</p><p>升级步骤图解：<img src="https://img-blog.csdnimg.cn/20190418133651854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FiZWxfTGl1amlucXVhbg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="六、压缩列表"><a href="#六、压缩列表" class="headerlink" title="六、压缩列表"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>六、压缩列表</h1><p>压缩列表是列表键和哈希键的底层实现之一。当一个列表键值包含少量列表键，并且每个列表项要么就是小整数值，要么就是长度比较短的字符串，那么Redis就会使用压缩列表来做列表键的底层实现。</p><h2 id="1、压缩列表的构成"><a href="#1、压缩列表的构成" class="headerlink" title="1、压缩列表的构成"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>1、压缩列表的构成</h2><p>压缩列表是由一系列特殊编码的连续内存块组成的顺序型数据结构，一个压缩列表可以包含任意多个节点 （entry），每个节点可以保存一个字节数组或者一个整数值。</p><p>压缩列表结构：<img src="https://img-blog.csdnimg.cn/20190419083726519.png" alt="在这里插入图片描述"></p><ul><li>zlbytes属性：表示压缩列表的总字节长度；</li><li>zltail属性：记录压缩列表表尾节点距离压缩列表的起始地址有多少字节；</li><li>zllen属性：记录了压缩列表包含的节点数量；</li><li>entryX属性：压缩列表包含的各个节点；</li><li>zlend属性：用于标记压缩列表的末端。</li></ul><h2 id="2、压缩列表节点的结构"><a href="#2、压缩列表节点的结构" class="headerlink" title="2、压缩列表节点的结构"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>2、压缩列表节点的结构</h2><p>压缩列表节点的结构如图：<img src="https://img-blog.csdnimg.cn/20190419085114429.png" alt="在这里插入图片描述"></p><ul><li><strong>previous_entry_length属性</strong>：以字节为单位，记录压缩列表中前一个节点的长度。<br>程序可以通过指针运算，根据当前节点的起始地址来计算出前一个节点的起始地址，以此实现遍历操作。</li><li><strong>encoding属性</strong>：记录了节点的content属性所保存数据的类型和长度；</li><li><strong>content属性</strong>：保存节点的值，可以是一个字节数组或者整数，值的类型和长度由节点的encoding属性决定。</li></ul><h2 id="3、连锁更新"><a href="#3、连锁更新" class="headerlink" title="3、连锁更新"></a><a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599"></a>3、连锁更新</h2><p>假设压缩列表中所有节点的previous_entry_length属性都是用1字节来保存，那么节点的长度只要小于等于253字节previous_entry_length都可以记录，但是，如果添加一个长度大于253字节的节点，那么下一个节点的previous_entry_length就无法保存该长度的值，同样的，下下个节点也无法保存上个节点的长度，由此将导致连续多次空间扩展操作。</p><p>添加节点和删除节点都可能导致连锁更新，但是这种操作出现的几率很低。</p><p>本文转自 <a href="https://blog.csdn.net/Abel_Liujinquan/article/details/89339599">https://blog.csdn.net/Abel_Liujinquan&#x2F;article&#x2F;details&#x2F;89339599</a>，如有侵权，请联系删除。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘扩容</title>
      <link href="/2020/05/30/%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/"/>
      <url>/2020/05/30/%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="案例-如何磁盘扩容"><a href="#案例-如何磁盘扩容" class="headerlink" title="[案例]如何磁盘扩容"></a>[案例]如何磁盘扩容</h1><blockquote><p>背景：日常工作中经常会遇到磁盘空间不足的情况，在服务器磁盘不足的情况中通常使用最快以及最灵活的lvm扩容方式进行</p></blockquote><blockquote><p>问题：如何通过lvm扩容磁盘，一般形式通过fdisk初始化挂载硬盘，然后通过pvc及vge相关命令进行相关磁盘格式处理，最后完成挂载</p></blockquote><ul><li><p>处理方法 通过fdisk命令初始化挂载的硬盘（fdisk &#x2F;dev&#x2F;vda）并且输入n进入新增磁盘步骤。Partition type部分输入p新增磁盘，随后进入选择分区号，可以直接回车默认分区号（此时需记录对应分区号，后面找磁盘方便），紧接着进入扇区编辑步骤，可根据需要扩容大小分配起始扇区及last扇区，完成后此两数值差为此磁盘大小。完成以上步骤后输入w保存所有操作，如操作过程有误可按ctrl c退出命令不保存相关操作。至此为之已完成磁盘初始化，此时需重启电脑重新挂载该磁盘生效相关配置。重启完毕后可以通过lsblk或者df -h找到分区后磁盘名字如vda3,此时可通过pvcreate 对应磁盘名字（&#x2F;dev&#x2F;vda3）进行pv创建。创建完毕后需查看需扩容磁盘所属group，查询完毕后通过命令vgextend创建vg（vgextend centos（此为查询得到的group） &#x2F;dev&#x2F;vda3）。挂载完毕后可通过命令lvdisplay查看所有lvm状态。查看之后通过命令lvextend将新磁盘挂载入需扩容磁盘同一目录（lvextend &#x2F;dev&#x2F;centos&#x2F;home（此为需扩容磁盘目录） &#x2F;dev&#x2F;vda3（此为新建磁盘） -L +900G（此为需要扩容的对应磁盘大小））。完成后通过命令xfs_growfs刷新磁盘（xfs_growfs &#x2F;dev&#x2F;mapper&#x2F;centos-home（此为需扩容磁盘目录））。至此完成磁盘扩容所有步骤，可再次通过命令lsblk或df -h查看磁盘大小。</p></li><li><p>问题思考:<br>由于lvm方式扩容简单且灵活，但一旦磁盘出现故障很难进行恢复或拆分等操作，因此该模式也存在一定风险，所以对于重要服务器一般创建磁盘时就需分配足够磁盘空间，同时定时做好备份。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>负载均衡详解</title>
      <link href="/2019/09/16/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/09/16/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="负载均衡介绍"><a href="#负载均衡介绍" class="headerlink" title="负载均衡介绍"></a>负载均衡介绍</h2><blockquote><p>负载均衡，英文名称为Load Balance，指由多台服务器以对称的方式组成一个服务器集合，每台服务器都具有等价的地位，<br>都可以单独对外提供服务而无须其他服务器的辅助。<br>通过某种负载分担技术，将外部发送来的请求均匀分配到对称结构中的某一台服务器上，而接收到请求的服务器独立地回应客户的请求。<br>负载均衡能够平均分配客户请求到服务器阵列，借此提供快速获取重要数据，解决大量并发访问服务问题，<br>这种集群技术可以用最少的投资获得接近于大型主机的性能。</p></blockquote><h2 id="负载均衡方式"><a href="#负载均衡方式" class="headerlink" title="负载均衡方式"></a>负载均衡方式</h2><blockquote><p>负载均衡分为软件负载均衡和硬件负载均衡</p></blockquote><h2 id="软件负载均衡"><a href="#软件负载均衡" class="headerlink" title="软件负载均衡"></a>软件负载均衡</h2><blockquote><p>常见的负载均衡软件有Nginx、LVS、HAProxy。</p></blockquote><h2 id="硬件负载均衡"><a href="#硬件负载均衡" class="headerlink" title="硬件负载均衡"></a>硬件负载均衡</h2><blockquote><p>常见的负载均衡硬件有Array、F5。</p></blockquote><h2 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h2><blockquote><p>定义一个服务器列表，每个负载均衡的算法会从中挑出一个服务器作为算法的结果。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class ServerIps &#123;</span><br><span class="line">﻿</span><br><span class="line">    private static final List&lt;String&gt; LIST = Arrays.asList(</span><br><span class="line">﻿</span><br><span class="line">            &quot;192.168.0.1&quot;,</span><br><span class="line">﻿</span><br><span class="line">            &quot;192.168.0.2&quot;,</span><br><span class="line">﻿</span><br><span class="line">            &quot;192.168.0.3&quot;,</span><br><span class="line">﻿</span><br><span class="line">            &quot;192.168.0.4&quot;,</span><br><span class="line">﻿</span><br><span class="line">            &quot;192.168.0.5&quot;,</span><br><span class="line">﻿</span><br><span class="line">            &quot;192.168.0.6&quot;,</span><br><span class="line">﻿</span><br><span class="line">            &quot;192.168.0.7&quot;,</span><br><span class="line">﻿</span><br><span class="line">            &quot;192.168.0.8&quot;,</span><br><span class="line">﻿</span><br><span class="line">            &quot;192.168.0.9&quot;,</span><br><span class="line">﻿</span><br><span class="line">            &quot;192.168.0.10&quot;</span><br><span class="line">﻿</span><br><span class="line">    );</span><br><span class="line">﻿</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>随机算法-RandomLoadBalance<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class Random &#123;</span><br><span class="line">﻿</span><br><span class="line">    public static String getServer() &#123;</span><br><span class="line">﻿</span><br><span class="line">        // 生成一个随机数作为list的下标值</span><br><span class="line">﻿</span><br><span class="line">        java.util.Random random = new java.util.Random();</span><br><span class="line">﻿</span><br><span class="line">        int randomPos = random.nextInt(ServerIps.LIST.size());</span><br><span class="line">﻿</span><br><span class="line">        return ServerIps.LIST.get(randomPos);</span><br><span class="line">﻿</span><br><span class="line">    &#125;</span><br><span class="line">﻿</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">﻿</span><br><span class="line">        // 连续调用10次</span><br><span class="line">﻿</span><br><span class="line">        for (int i=0; i&lt;10; i++) &#123;</span><br><span class="line">﻿</span><br><span class="line">            System.out.println(getServer());</span><br><span class="line">﻿</span><br><span class="line">        &#125;</span><br><span class="line">﻿</span><br><span class="line">    &#125;</span><br><span class="line">﻿</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">﻿</span><br><span class="line">192.168.0.3</span><br><span class="line">﻿</span><br><span class="line">192.168.0.4</span><br><span class="line">﻿</span><br><span class="line">192.168.0.7</span><br><span class="line">﻿</span><br><span class="line">192.168.0.1</span><br><span class="line">﻿</span><br><span class="line">192.168.0.2</span><br><span class="line">﻿</span><br><span class="line">192.168.0.7</span><br><span class="line">﻿</span><br><span class="line">192.168.0.3</span><br><span class="line">﻿</span><br><span class="line">192.168.0.9</span><br><span class="line">﻿</span><br><span class="line">192.168.0.1</span><br><span class="line">﻿</span><br><span class="line">192.168.0.1</span><br></pre></td></tr></table></figure><blockquote><p>当调用次数比较少时，<br>Random 产生的随机数可能会比较集中，<br>此时多数请求会落到同一台服务器上，只有在经过多次请求后，<br>才能使调用请求进行“均匀”分配。调用量少这一点并没有什么关系<br>，负载均衡机制不正是为了应对请求量多的情况吗，所以随机算法也是用得比较多的一种算法。</p></blockquote><p>但是，上面的随机算法适用于每天机器的性能差不多的时候，实际上，生产中可能某些机器的性能更高一点，它可以处理更多的请求，所以，我们可以对每台服务器设置一个权重。<br>在ServerIps类中增加服务器权重对应关系MAP，权重之和为50：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static final Map&lt;String, Integer&gt; WEIGHT_LIST = new HashMap&lt;String, Integer&gt;();</span><br><span class="line">﻿</span><br><span class="line">    static &#123;</span><br><span class="line">﻿</span><br><span class="line">        // 权重之和为50</span><br><span class="line">﻿</span><br><span class="line">        WEIGHT_LIST.put(&quot;192.168.0.1&quot;, 1);</span><br><span class="line">﻿</span><br><span class="line">        WEIGHT_LIST.put(&quot;192.168.0.2&quot;, 8);</span><br><span class="line">﻿</span><br><span class="line">        WEIGHT_LIST.put(&quot;192.168.0.3&quot;, 3);</span><br><span class="line">﻿</span><br><span class="line">        WEIGHT_LIST.put(&quot;192.168.0.4&quot;, 6);</span><br><span class="line">﻿</span><br><span class="line">        WEIGHT_LIST.put(&quot;192.168.0.5&quot;, 5);</span><br><span class="line">﻿</span><br><span class="line">        WEIGHT_LIST.put(&quot;192.168.0.6&quot;, 5);</span><br><span class="line">﻿</span><br><span class="line">        WEIGHT_LIST.put(&quot;192.168.0.7&quot;, 4);</span><br><span class="line">﻿</span><br><span class="line">        WEIGHT_LIST.put(&quot;192.168.0.8&quot;, 7);</span><br><span class="line">﻿</span><br><span class="line">        WEIGHT_LIST.put(&quot;192.168.0.9&quot;, 2);</span><br><span class="line">﻿</span><br><span class="line">        WEIGHT_LIST.put(&quot;192.168.0.10&quot;, 9);</span><br><span class="line">﻿</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>那么现在的随机算法应该要改成权重随机算法，当调用量比较多的时候，服务器使用的分布应该近似对应权重的分布。</p></li><li>权重随机算法</li></ul><p>简单的实现思路是，把每个服务器按它所对应的服务器进行复制，具体看代码更加容易理解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class WeightRandom &#123;</span><br><span class="line">﻿</span><br><span class="line">    public static String getServer() &#123;</span><br><span class="line">﻿</span><br><span class="line">        // 生成一个随机数作为list的下标值</span><br><span class="line">﻿</span><br><span class="line">        List&lt;String&gt; ips = new ArrayList&lt;String&gt;();</span><br><span class="line">﻿</span><br><span class="line">        for (String ip : ServerIps.WEIGHT_LIST.keySet()) &#123;</span><br><span class="line">﻿</span><br><span class="line">            Integer weight = ServerIps.WEIGHT_LIST.get(ip);</span><br><span class="line">﻿</span><br><span class="line">            // 按权重进行复制</span><br><span class="line">﻿</span><br><span class="line">            for (int i=0; i&lt;weight; i++) &#123;</span><br><span class="line">﻿</span><br><span class="line">                ips.add(ip);</span><br><span class="line">﻿</span><br><span class="line">            &#125;</span><br><span class="line">﻿</span><br><span class="line">        &#125;</span><br><span class="line">﻿</span><br><span class="line">        java.util.Random random = new java.util.Random();</span><br><span class="line">﻿</span><br><span class="line">        int randomPos = random.nextInt(ips.size());</span><br><span class="line">﻿</span><br><span class="line">        return ips.get(randomPos);</span><br><span class="line">﻿</span><br><span class="line">    &#125;</span><br><span class="line">﻿</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">﻿</span><br><span class="line">        // 连续调用10次</span><br><span class="line">﻿</span><br><span class="line">        for (int i=0; i&lt;10; i++) &#123;</span><br><span class="line">﻿</span><br><span class="line">            System.out.println(getServer());</span><br><span class="line">﻿</span><br><span class="line">        &#125;</span><br><span class="line">﻿</span><br><span class="line">    &#125;</span><br><span class="line">﻿</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">﻿</span><br><span class="line">192.168.0.8</span><br><span class="line">﻿</span><br><span class="line">192.168.0.2</span><br><span class="line">﻿</span><br><span class="line">192.168.0.7</span><br><span class="line">﻿</span><br><span class="line">192.168.0.10</span><br><span class="line">﻿</span><br><span class="line">192.168.0.8</span><br><span class="line">﻿</span><br><span class="line">192.168.0.8</span><br><span class="line">﻿</span><br><span class="line">192.168.0.4</span><br><span class="line">﻿</span><br><span class="line">192.168.0.7</span><br><span class="line">﻿</span><br><span class="line">192.168.0.6</span><br><span class="line">﻿</span><br><span class="line">192.168.0.8</span><br></pre></td></tr></table></figure><ul><li>轮询算法-RoundRobinLoadBalance<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public class RoundRobin &#123;</span><br><span class="line">﻿</span><br><span class="line">    // 当前循环的位置</span><br><span class="line">﻿</span><br><span class="line">    private static Integer pos = 0;</span><br><span class="line">﻿</span><br><span class="line">    public static String getServer() &#123;</span><br><span class="line">﻿</span><br><span class="line">        String ip = null;</span><br><span class="line">﻿</span><br><span class="line">        // pos同步</span><br><span class="line">﻿</span><br><span class="line">        synchronized (pos) &#123;</span><br><span class="line">﻿</span><br><span class="line">            if (pos &gt;= ServerIps.LIST.size()) &#123;</span><br><span class="line">﻿</span><br><span class="line">                pos = 0;</span><br><span class="line">﻿</span><br><span class="line">            &#125;</span><br><span class="line">﻿</span><br><span class="line">            ip = ServerIps.LIST.get(pos);</span><br><span class="line">﻿</span><br><span class="line">            pos++;</span><br><span class="line">﻿</span><br><span class="line">        &#125;</span><br><span class="line">﻿</span><br><span class="line">        return ip;</span><br><span class="line">﻿</span><br><span class="line">    &#125;</span><br><span class="line">﻿</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">﻿</span><br><span class="line">        // 连续调用10次</span><br><span class="line">﻿</span><br><span class="line">        for (int i = 0; i &lt; 11; i++) &#123;</span><br><span class="line">﻿</span><br><span class="line">            System.out.println(getServer());</span><br><span class="line">﻿</span><br><span class="line">        &#125;</span><br><span class="line">﻿</span><br><span class="line">    &#125;</span><br><span class="line">﻿</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">﻿</span><br><span class="line">运行结果：</span><br><span class="line">﻿</span><br><span class="line">192.168.0.1</span><br><span class="line">﻿</span><br><span class="line">192.168.0.2</span><br><span class="line">﻿</span><br><span class="line">192.168.0.3</span><br><span class="line">﻿</span><br><span class="line">192.168.0.4</span><br><span class="line">﻿</span><br><span class="line">192.168.0.5</span><br><span class="line">﻿</span><br><span class="line">192.168.0.6</span><br><span class="line">﻿</span><br><span class="line">192.168.0.7</span><br><span class="line">﻿</span><br><span class="line">192.168.0.8</span><br><span class="line">﻿</span><br><span class="line">192.168.0.9</span><br><span class="line">﻿</span><br><span class="line">192.168.0.10</span><br><span class="line">﻿</span><br><span class="line">192.168.0.1</span><br></pre></td></tr></table></figure><blockquote><p>这种算法很简单，也很公平，每台服务轮流来进行服务，但是有的机器性能好，所以能者多劳，和随机算法一下，加上权重这个维度之后，其中一种实现方法就是复制法，这里就不演示了，这种复制算法的缺点和随机算法的是一样的，比较消耗内存，那么自然就有其他实现方法。我下面来介绍一种算法：<br>这种算法需要加入一个概念：调用编号，比如第1次调用为1， 第2次调用为2， 第100次调用为100，调用编号是递增的，所以我们可以根据这个调用编号推算出服务器。<br>假设我们有三台服务器 servers &#x3D; [A, B, C]，对应的权重为 weights &#x3D; [ 2, 5, 1], 总权重为8，我们可以理解为有8台“服务器”，这是8台“不具有并发功能”，其中有2台为A，5台为B，1台为C，一次调用过来的时候，需要按顺序访问，比如有10次调用，那么服务器调用顺序为AABBBBBCAA，<br>调用编号会越来越大，而服务器是固定的，所以需要把调用编号“缩小”，这里对调用编号进行取余，除数为总权重和，比如：</p></blockquote></li><li>1号调用，1%8&#x3D;1；</li><li>2号调用，2%8&#x3D;2；</li><li>3号调用，3%8&#x3D;3；</li><li>8号调用，8%8&#x3D;0；</li><li>9号调用，9%8&#x3D;1；</li><li>100号调用，100%8&#x3D;4；<br>我们发现调用编号可以被缩小为0-7之间的8个数字，问题是怎么根据这个8个数字找到对应的服务器呢？和我们随机算法类似，这里也可以把权重想象为一个坐标轴“0—–2—–7—–8”</li><li>1号调用，1%8&#x3D;1，offset &#x3D; 1, offset &lt;&#x3D; 2 is true，取A；</li><li>2号调用，2%8&#x3D;2；offset &#x3D; 2，offset &lt;&#x3D; 2 is true, 取A;</li><li>3号调用，3%8&#x3D;3；offset &#x3D; 3, offset &lt;&#x3D; 2 is false, offset &#x3D; offset - 2, offset &#x3D; 1, offset &lt;&#x3D; 5，取B</li><li>8号调用，8%8&#x3D;0；offset &#x3D; 0, 特殊情况，offset &#x3D; 8，offset &lt;&#x3D; 2 is false, offset &#x3D; offset - 2, offset &#x3D; 6, offset  &lt;&#x3D; 5 is false, offset &#x3D; offset - 5, offset &#x3D; 1, offset &lt;&#x3D; 1 is true, 取C;</li><li>9号调用，9%8&#x3D;1；&#x2F;&#x2F; …</li><li>100号调用，100%8&#x3D;4； &#x2F;&#x2F;…<br>实现：<br>模拟调用编号获取工具：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Sequence &#123;</span><br><span class="line">﻿</span><br><span class="line">    public static Integer num = 0;</span><br><span class="line">﻿</span><br><span class="line">    public static Integer getAndIncrement() &#123;</span><br><span class="line">﻿</span><br><span class="line">        return ++num;</span><br><span class="line">﻿</span><br><span class="line">    &#125;</span><br><span class="line">﻿</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">public class WeightRoundRobin &#123;</span><br><span class="line">﻿</span><br><span class="line">    private static Integer pos = 0;</span><br><span class="line">﻿</span><br><span class="line">    public static String getServer() &#123;</span><br><span class="line">﻿</span><br><span class="line">        int totalWeight = 0;</span><br><span class="line">﻿</span><br><span class="line">        boolean sameWeight = true; // 如果所有权重都相等，那么随机一个ip就好了</span><br><span class="line">﻿</span><br><span class="line">        Object[] weights = ServerIps.WEIGHT_LIST.values().toArray();</span><br><span class="line">﻿</span><br><span class="line">        for (int i = 0; i &lt; weights.length; i++) &#123;</span><br><span class="line">﻿</span><br><span class="line">            Integer weight = (Integer) weights[i];</span><br><span class="line">﻿</span><br><span class="line">            totalWeight += weight;</span><br><span class="line">﻿</span><br><span class="line">            if (sameWeight &amp;&amp; i &gt; 0 &amp;&amp; !weight.equals(weights[i - 1])) &#123;</span><br><span class="line">﻿</span><br><span class="line">                sameWeight = false;</span><br><span class="line">﻿</span><br><span class="line">            &#125;</span><br><span class="line">﻿</span><br><span class="line">        &#125;</span><br><span class="line">﻿</span><br><span class="line">        Integer sequenceNum = Sequence.getAndIncrement();</span><br><span class="line">﻿</span><br><span class="line">        Integer offset = sequenceNum % totalWeight;</span><br><span class="line">﻿</span><br><span class="line">        offset = offset == 0 ?  totalWeight : offset;</span><br><span class="line">﻿</span><br><span class="line">        if (!sameWeight) &#123;</span><br><span class="line">﻿</span><br><span class="line">            for (String ip : ServerIps.WEIGHT_LIST.keySet()) &#123;</span><br><span class="line">﻿</span><br><span class="line">                Integer weight = ServerIps.WEIGHT_LIST.get(ip);</span><br><span class="line">﻿</span><br><span class="line">                if (offset &lt;= weight) &#123;</span><br><span class="line">﻿</span><br><span class="line">                    return ip;</span><br><span class="line">﻿</span><br><span class="line">                &#125;</span><br><span class="line">﻿</span><br><span class="line">                offset = offset - weight;</span><br><span class="line">﻿</span><br><span class="line">            &#125;</span><br><span class="line">﻿</span><br><span class="line">        &#125;</span><br><span class="line">﻿</span><br><span class="line">        String ip = null;</span><br><span class="line">﻿</span><br><span class="line">        synchronized (pos) &#123;</span><br><span class="line">﻿</span><br><span class="line">            if (pos &gt;= ServerIps.LIST.size()) &#123;</span><br><span class="line">﻿</span><br><span class="line">                pos = 0;</span><br><span class="line">﻿</span><br><span class="line">            &#125;</span><br><span class="line">﻿</span><br><span class="line">            ip = ServerIps.LIST.get(pos);</span><br><span class="line">﻿</span><br><span class="line">            pos++;</span><br><span class="line">﻿</span><br><span class="line">        &#125;</span><br><span class="line">﻿</span><br><span class="line">        return ip;</span><br><span class="line">﻿</span><br><span class="line">    &#125;</span><br><span class="line">﻿</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">﻿</span><br><span class="line">        // 连续调用11次</span><br><span class="line">﻿</span><br><span class="line">        for (int i = 0; i &lt; 11; i++) &#123;</span><br><span class="line">﻿</span><br><span class="line">            System.out.println(getServer());</span><br><span class="line">﻿</span><br><span class="line">        &#125;</span><br><span class="line">﻿</span><br><span class="line">    &#125;</span><br><span class="line">﻿</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">﻿</span><br><span class="line">192.168.0.1</span><br><span class="line">﻿</span><br><span class="line">192.168.0.2</span><br><span class="line">﻿</span><br><span class="line">192.168.0.2</span><br><span class="line">﻿</span><br><span class="line">192.168.0.2</span><br><span class="line">﻿</span><br><span class="line">192.168.0.2</span><br><span class="line">﻿</span><br><span class="line">192.168.0.2</span><br><span class="line">﻿</span><br><span class="line">192.168.0.2</span><br><span class="line">﻿</span><br><span class="line">192.168.0.2</span><br><span class="line">﻿</span><br><span class="line">192.168.0.2</span><br><span class="line">﻿</span><br><span class="line">192.168.0.3</span><br><span class="line">﻿</span><br><span class="line">192.168.0.3</span><br></pre></td></tr></table></figure><blockquote><p>但是这种算法有一个缺点：一台服务器的权重特别大的时候，他需要连续的的处理请求，但是实际上我们想达到的效果是，对于100次请求，只要有100*8&#x2F;50&#x3D;16次就够了，这16次不一定要连续的访问，比如假设我们有三台服务器 servers &#x3D; [A, B, C]，对应的权重为 weights &#x3D; [5, 1, 1] , 总权重为7，那么上述这个算法的结果是：AAAAABC，那么如果能够是这么一个结果呢：AABACAA，把B和C平均插入到5个A中间，这样是比较均衡的了</p></blockquote></li></ul><p>我们这里可以改成平滑加权轮询。<br>平滑加权轮询<br>思路：每个服务器对应两个权重，分别为 weight 和 currentWeight。其中 weight 是固定的，currentWeight 会动态调整，初始值为0。当有新的请求进来时，遍历服务器列表，让它的 currentWeight 加上自身权重。遍历完成后，找到最大的 currentWeight，并将其减去权重总和，然后返回相应的服务器即可。</p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
