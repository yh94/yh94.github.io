<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>QPS、TPS、并发数</title>
      <link href="/2022/04/16/QPS%E3%80%81TPS%E3%80%81%E5%B9%B6%E5%8F%91%E6%95%B0/"/>
      <url>/2022/04/16/QPS%E3%80%81TPS%E3%80%81%E5%B9%B6%E5%8F%91%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-平均响应时长（每个用户请求）"><a href="#1-平均响应时长（每个用户请求）" class="headerlink" title="1. 平均响应时长（每个用户请求）"></a>1. 平均响应时长（每个用户请求）</h1><ul><li>公式：Time token for tests&#x2F;（Complete requests&#x2F;Concurrency Level）</li><li>用户平均请求等待时间 &#x3D; 总耗时 &#x2F;（总请求数 &#x2F; 并发数）<blockquote><p> 结合1、2 &#x3D;&#x3D;&gt; 用户平均请求等待时间 &#x3D; 服务器平均请求等待时间 * 并发数</p></blockquote></li></ul><h1 id="2-服务器平均请求等待时间（每个请求）"><a href="#2-服务器平均请求等待时间（每个请求）" class="headerlink" title="2. 服务器平均请求等待时间（每个请求）"></a>2. 服务器平均请求等待时间（每个请求）</h1><ul><li>公式：总耗时 &#x2F; 总请求数</li></ul><h1 id="3-QPS（每秒能够相应的查询次数）"><a href="#3-QPS（每秒能够相应的查询次数）" class="headerlink" title="3. QPS（每秒能够相应的查询次数）"></a>3. QPS（每秒能够相应的查询次数）</h1><ul><li>公式：QPS &#x3D; 并发数 &#x2F; 平均响应时长<blockquote><p>结合1、3 &#x3D;&#x3D;&gt; QPS &#x3D; 总请求数 &#x2F; 总耗时</p></blockquote></li></ul><h1 id="4-TPS"><a href="#4-TPS" class="headerlink" title="4.TPS"></a>4.TPS</h1><ul><li>每秒钟处理完的事务次数，一般TPS是对整个系统来讲的。一个应用系统1s能完成多少事务处理</li></ul><h1 id="5-并发数（系统同时处理的request-或-事务数）"><a href="#5-并发数（系统同时处理的request-或-事务数）" class="headerlink" title="5. 并发数（系统同时处理的request 或 事务数）"></a>5. 并发数（系统同时处理的request 或 事务数）</h1><ul><li>公式：并发数 &#x3D; QPS * 平均响应时长<blockquote><p>指系统可以同时承载的正常使用系统功能的用户的数量</p></blockquote></li></ul><h1 id="6-吞吐量"><a href="#6-吞吐量" class="headerlink" title="6. 吞吐量"></a>6. 吞吐量</h1><ul><li>F &#x3D; VU * R &#x2F; T</li><li>其中F为吞吐量，VU表示虚拟用户个数，R表示每个虚拟用户发出的请求数，T表示性能测试所用的时间<blockquote><p>一个系统吞吐量通常由QPS(TPS)、并发数两个因素决定，在应用场景访问压力下，只要某一项达到系统最高值或超标，系统超负荷工作、上下文切换、内存等其他消耗导致系统性能下降，系统的吞吐量会下降反而会下降。</p></blockquote></li></ul><h1 id="7-AbTest例子"><a href="#7-AbTest例子" class="headerlink" title="7.AbTest例子"></a>7.AbTest例子</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[root@s1 ~]# ab -c 500 -n 10000 -p POST.json -T application/json  http://10.152.49.33:8080/scrm/searchCustomer</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 10.152.49.33 (be patient)</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Completed 3000 requests</span><br><span class="line">Completed 4000 requests</span><br><span class="line">Completed 5000 requests</span><br><span class="line">Completed 6000 requests</span><br><span class="line">Completed 7000 requests</span><br><span class="line">Completed 8000 requests</span><br><span class="line">Completed 9000 requests</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Finished 10000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:</span><br><span class="line">Server Hostname:        10.152.49.33</span><br><span class="line">Server Port:            8080</span><br><span class="line"></span><br><span class="line">Document Path:          /scrm/searchCustomer</span><br><span class="line">Document Length:        5257 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      500 // 并发数</span><br><span class="line">Time taken for tests:   151.283 seconds // 总耗时</span><br><span class="line">Complete requests:      10000 // 总请求数</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      53620000 bytes</span><br><span class="line">Total body sent:        8030000</span><br><span class="line">HTML transferred:       52570000 bytes</span><br><span class="line">Requests per second:    66.10 [#/sec] (mean)  // QPS</span><br><span class="line">Time per request:       7564.153 [ms] (mean)  // 用户平均请求等待时间</span><br><span class="line">Time per request:       15.128 [ms] (mean, across all concurrent requests) // 服务器平均请求等待时间</span><br><span class="line">Transfer rate:          346.13 [Kbytes/sec] received</span><br><span class="line">                        51.84 kb/s sent</span><br><span class="line">                        397.96 kb/s total</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0   13 112.2      0    1003</span><br><span class="line">Processing:   168 7447 5399.8   5613   34826</span><br><span class="line">Waiting:      168 7447 5399.8   5613   34826</span><br><span class="line">Total:        183 7461 5398.2   5618   34826</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%   5618</span><br><span class="line">  66%   6345</span><br><span class="line">  75%   7057</span><br><span class="line">  80%   7383</span><br><span class="line">  90%  13845</span><br><span class="line">  95%  23104</span><br><span class="line">  98%  25971</span><br><span class="line">  99%  27224</span><br><span class="line"> 100%  34826 (longest request)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>find命令</title>
      <link href="/2022/04/16/explain%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/04/16/explain%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL-Explain详解"><a href="#MySQL-Explain详解" class="headerlink" title="MySQL Explain详解"></a>MySQL Explain详解</h2><p>[TOC]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//查询叫张三的人</span><br><span class="line">explain select * from emo where name = &#x27;张三&#x27;</span><br></pre></td></tr></table></figure><p><img src="/'./img/img.png'" alt="image.png"></p><h3 id="expain出来的信息有10列，分别是id、select-type、table、type、possible-keys、key、key-len、ref、rows、Extra"><a href="#expain出来的信息有10列，分别是id、select-type、table、type、possible-keys、key、key-len、ref、rows、Extra" class="headerlink" title="expain出来的信息有10列，分别是id、select_type、table、type、possible_keys、key、key_len、ref、rows、Extra"></a>expain出来的信息有10列，分别是id、select_type、table、type、possible_keys、key、key_len、ref、rows、Extra</h3><p>概要描述：</p><ul><li><p>id:  选择标识符</p></li><li><p>select_type: 表示查询的类型。</p></li><li><p>table: 输出结果集的表</p></li><li><p>partitions: 匹配的分区</p></li><li><p>type: 表示表的连接类型</p></li><li><p>possible_keys: 表示查询时，可能使用的索引</p></li><li><p>key: 表示实际使用的索引</p></li><li><p>key_len: 索引字段的长度</p></li><li><p>ref: 列与索引的比较</p></li><li><p>rows: 扫描出的行数(估算的行数)</p></li><li><p>filtered: 按表条件过滤的行百分比</p></li><li><p>Extra: 执行情况的描述和说明</p><h3 id="1、id"><a href="#1、id" class="headerlink" title="1、id"></a>1、<em>id</em></h3><blockquote><p>SELECT识别符。这是SELECT的查询序列号<br>我的理解是SQL执行的顺序的标识，SQL从大到小的执行。</p></blockquote><h3 id="2、select-type"><a href="#2、select-type" class="headerlink" title="2、select_type"></a>2、<em>select_type</em></h3><blockquote><p> 示查询中每个select子句的类型</p></blockquote></li><li><p>SIMPLE(简单SELECT，不使用UNION或子查询等)</p></li><li><p>PRIMARY(子查询中最外层查询，查询中若包含任何复杂的子部分，最外层的select被标记为PRIMARY)</p></li><li><p>UNION(UNION中的第二个或后面的SELECT语句)</p></li><li><p>DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)</p></li><li><p>UNION RESULT(UNION的结果，union语句中第二个select开始后面所有select)</p></li><li><p>SUBQUERY(子查询中的第一个SELECT，结果不依赖于外部查询)</p></li><li><p>DEPENDENT SUBQUERY(子查询中的第一个SELECT，依赖于外部查询)</p></li><li><p>DERIVED(派生表的SELECT, FROM子句的子查询)</p></li><li><p>UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)</p><h3 id="3、table"><a href="#3、table" class="headerlink" title="3、table"></a>3、table</h3><blockquote><p>显示这一步所访问数据库中表名称（显示这一行的数据是关于哪张表的），有时不是真实的表名字，可能是简称，例如上面的e，d，也可能是第几步执行的结果的简称</p></blockquote><h3 id="4、type"><a href="#4、type" class="headerlink" title="4、type"></a>4、type</h3><blockquote><p>表访问方式，表示MySQL在表中找到所需行的方式，又称“访问类型”。<br>常用的类型有： ALL、index、range、ref、eq_ref、const、system、NULL（从左到右，性能从差到好）</p></blockquote></li><li><p>ALL：Full Table Scan， MySQL将遍历全表以找到匹配的行</p></li><li><p>index: Full Index Scan，index与ALL区别为index类型只遍历索引树</p></li><li><p>range:只检索给定范围的行，使用一个索引来选择行</p></li><li><p>ref: 表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p></li><li><p>eq_ref: 类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件</p></li><li><p>const、system: 当MySQL对查询某部分进行优化，并转换为一个常量时，使用这些类型访问。如将主键置于where列表中，MySQL就能将该查询转换为一个常量，system是const类型的特例，当查询的表只有一行的情况下，使用system</p></li><li><p>NULL: MySQL在优化过程中分解语句，执行时甚至不用访问表或索引，例如从一个索引列里选取最小值可以通过单独索引查找完成。</p><h3 id="5、possible-keys"><a href="#5、possible-keys" class="headerlink" title="5、possible_keys"></a>5、possible_keys</h3><blockquote><p>指出MySQL**&#x3D;&#x3D;能使用哪个索引在表中找到记录&#x3D;&#x3D;**，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用（该查询可以利用的索引，如果没有任何索引显示 null）该列完全独立于EXPLAIN输出所示的表的次序。这意味着在possible_keys中的某些键实际上不能按生成的表次序使用。如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查WHERE子句看是否它引用某些列或适合索引的列来提高你的查询性能。如果是这样，创造一个适当的索引并且再次用EXPLAIN检查查询</p></blockquote><h3 id="6、Key"><a href="#6、Key" class="headerlink" title="6、Key"></a>6、Key</h3><blockquote><p>key列显示MySQL实际决定使用的键（索引），必然包含在possible_keys中<br>如果没有选择索引，键是NULL。要想强制MySQL使用或忽视possible_keys列中的索引，在查询中使用FORCE INDEX、USE INDEX或者IGNORE INDEX。</p></blockquote><h3 id="7、key-len"><a href="#7、key-len" class="headerlink" title="7、key_len"></a>7、key_len</h3><blockquote><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（<strong>key_len</strong>显示的值为索引字段的<strong>最大可能长度</strong>，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）<br>不损失精确性的情况下，<strong>长度越短越好</strong></p></blockquote><h3 id="8、ref"><a href="#8、ref" class="headerlink" title="8、ref"></a>8、ref</h3><blockquote><p>列与索引的比较，表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p></blockquote><h3 id="9、rows"><a href="#9、rows" class="headerlink" title="9、rows"></a>9、rows</h3><blockquote><p>估算出结果集行数，表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</p></blockquote><h3 id="10、Extra"><a href="#10、Extra" class="headerlink" title="10、Extra"></a>10、Extra</h3><blockquote><p>该列包含MySQL解决查询的详细信息,有以下几种情况</p></blockquote></li><li><p>Using where:不用读取表中所有信息，仅通过索引就可以获取所需数据，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示mysql服务器将在存储引擎检索行后再进行过滤</p></li><li><p>Using temporary：表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询，常见 group by ; order by</p></li><li><p>Using filesort：当Query中包含 order by 操作，而且无法利用索引完成的排序操作称为“文件排序”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 测试Extra的filesort</span><br><span class="line">explain select * from emp order by name;</span><br></pre></td></tr></table></figure></li><li><p>Using join buffer：改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。</p></li><li><p>Impossible where：这个值强调了where语句会导致没有符合条件的行（通过收集统计信息不可能存在结果）。</p></li><li><p>Select tables optimized away：这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行</p></li><li><p>No tables used：Query语句中使用from dual 或不含任何from子句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-- explain select now() from dual;</span><br></pre></td></tr></table></figure></li></ul><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul><li>EXPLAIN不会告诉你关于触发器、存储过程的信息或用户自定义函数对查询的影响情况</li><li>EXPLAIN不考虑各种Cache</li><li>EXPLAIN不能显示MySQL在执行查询时所作的优化工作</li><li>部分统计信息是估算的，并非精确值</li><li>EXPALIN只能解释SELECT操作，其他操作要重写为SELECT后查看执行计。</li><li>通过收集统计信息不可能存在结果</li></ul>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
          <category> sql调优 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> sql调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>find命令</title>
      <link href="/2022/04/16/find%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/04/16/find%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">将当前目录及其子目录下所有文件后缀为 .c 的文件列出来:</span><br><span class="line"># find . -name &quot;*.c&quot;</span><br><span class="line">将当前目录及其子目录中的所有文件列出：</span><br><span class="line"></span><br><span class="line"># find . -type f</span><br><span class="line">将当前目录及其子目录下所有最近 20 天内更新过的文件列出:</span><br><span class="line"></span><br><span class="line"># find . -ctime -20</span><br><span class="line">查找 /var/log 目录中更改时间在 7 日以前的普通文件，并在删除之前询问它们：</span><br><span class="line"></span><br><span class="line"># find /var/log -type f -mtime +7 -ok rm &#123;&#125; \;</span><br><span class="line">查找当前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件：</span><br><span class="line"></span><br><span class="line"># find . -type f -perm 644 -exec ls -l &#123;&#125; \;</span><br><span class="line">查找系统中所有文件长度为 0 的普通文件，并列出它们的完整路径：</span><br><span class="line"></span><br><span class="line"># find / -type f -size 0 -exec ls -l &#123;&#125; \;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8之optionAl用法</title>
      <link href="/2022/04/16/optional/"/>
      <url>/2022/04/16/optional/</url>
      
        <content type="html"><![CDATA[<h1 id="实战使用"><a href="#实战使用" class="headerlink" title="实战使用"></a>实战使用</h1><blockquote><p>以前写法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public String getCity(User user)  throws Exception&#123;</span><br><span class="line">        if(user!=null)&#123;</span><br><span class="line">            if(user.getAddress()!=null)&#123;</span><br><span class="line">                Address address = user.getAddress();</span><br><span class="line">                if(address.getCity()!=null)&#123;</span><br><span class="line">                    return address.getCity();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new Excpetion(&quot;取值错误&quot;); </span><br><span class="line">    &#125;</span><br><span class="line">```    </span><br><span class="line">&gt; JAVA8写法</span><br></pre></td></tr></table></figure><p>public String getCity(User user) throws Exception{<br>    return Optional.ofNullable(user)<br>                   .map(u-&gt; u.getAddress())<br>                   .map(a-&gt;a.getCity())<br>                   .orElseThrow(()-&gt;new Exception(“取指错误”));<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 例二</span><br><span class="line">&gt; 以前写法</span><br></pre></td></tr></table></figure><p>if(user!&#x3D;null){<br>    dosomething(user);<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; JAVA8写法</span><br></pre></td></tr></table></figure><p> Optional.ofNullable(user)<br>    .ifPresent(u-&gt;{<br>        dosomething(u);<br>});</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 例三</span><br><span class="line"></span><br><span class="line">&gt; 以前写法</span><br></pre></td></tr></table></figure><p>public User getUser(User user) throws Exception{<br>    if(user!&#x3D;null){<br>        String name &#x3D; user.getName();<br>        if(“zhangsan”.equals(name)){<br>            return user;<br>        }<br>    }else{<br>        user &#x3D; new User();<br>        user.setName(“zhangsan”);<br>        return user;<br>    }<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; java8写法</span><br></pre></td></tr></table></figure><p>public User getUser(User user) {<br>    return Optional.ofNullable(user)<br>                   .filter(u-&gt;”zhangsan”.equals(u.getName()))<br>                   .orElseGet(()-&gt; {<br>                        User user1 &#x3D; new User();<br>                        user1.setName(“zhangsan”);<br>                        return user1;<br>                   });<br>}</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis问题排查</title>
      <link href="/2022/04/16/redis%E7%BA%BF%E4%B8%8A%E6%8E%92%E6%9F%A5/"/>
      <url>/2022/04/16/redis%E7%BA%BF%E4%B8%8A%E6%8E%92%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis问题排查"><a href="#Redis问题排查" class="headerlink" title="Redis问题排查"></a>Redis问题排查</h1><ul><li><p>在系统缓慢的情况下，查出是内网带宽暂满的原因导致。通过网络工具查出Redis在高分期使用内网带宽<br>达到300M&#x2F;S，占用总内网带宽的30%，于是对Redis问题进行排查。</p><h1 id="通过RDB工具分析RDB中大Key的情况"><a href="#通过RDB工具分析RDB中大Key的情况" class="headerlink" title="通过RDB工具分析RDB中大Key的情况"></a>通过RDB工具分析RDB中大Key的情况</h1></li><li><p>RDB是redis数据库的快照文件，存储在硬盘上，用于持久化缓存。带宽过高，肯定是大Key的频繁读取<br>导致的，所以要找出Redis中排在前几的大key进行分析，于是乎从网上找到了一款基于Go语言编写的一<br>款RDB分析工具–RDR（<a href="https://github.com/xueqiu/rdr%EF%BC%89%E3%80%82">https://github.com/xueqiu/rdr）。</a><br>通过RDR加载RDB后，分析结果如下：<br><img src="https://note.youdao.com/yws/res/177/619F82B355884E9EBE84E06C327AD989" alt="avatar"></p></li><li><p>可以看到Redis的内存大小、key数量及大小、每个类型的数量、占比等，发现排在前几名的大Key分别<br>是dataDicCache、configCache、sysPage、USER_PERMISSION。存储类型都是Hash，其中<br>dataDicCache、configCache、sysPage在hash表中的数据都1条，但是大小却特别大，其中dataDicCache达到了惊人的918kb。<br>通过Redis的MONITOR日志查看大Key的读取情况<br>语法<br>redis Monitor 命令基本语法如下：</p><blockquote><p>redis 127.0.0.1:6379&gt; MONITOR</p></blockquote></li><li><p>监控后得到的日志如下：<br><img src="https://note.youdao.com/yws/res/180/C4CDD337ED994CF5BA66CAF004805D76" alt="image"></p></li><li><p>通过统计30秒左右的MONITOR日志，发现dataDicCache缓存读取数量巨大。一次900kb，一秒就有上百次。优化掉频繁读取的大Key，减少I&#x2F;O量<br>找到获取缓存的地方，以静态变量来存储，在调用缓存时直接获取变量，不走Redis来获取，刷新缓存时同时刷新静态变量。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>不要将频繁读取的大表存储到一个key中，不管类型是hash还是string，可以将大表拆分成多个key来存储，一次获取只获取一条数据。可以减少大量的IO和反序列化所消耗的时间</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> 性能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何保证消息的可靠性传输？（如何处理消息丢失的问题）</title>
      <link href="/2022/04/16/rabbitmq%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF/"/>
      <url>/2022/04/16/rabbitmq%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>这个是肯定的，用 MQ 有个基本原则，就是数据不能多一条，也不能少一条，不能多，就是重复消费和幂等性问题。不能少，就是说这数据别搞丢了。那这个问题你必须得考虑一下。</p><p>如果说你这个是用 MQ 来传递非常核心的消息，比如说计费、扣费的一些消息，那必须确保这个 MQ 传递过程中绝对不会把计费消息给弄丢。</p><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="生产者弄丢了数据"><a href="#生产者弄丢了数据" class="headerlink" title="生产者弄丢了数据"></a>生产者弄丢了数据</h2><p>生产者将数据发送到 RabbitMQ 的时候，可能数据就在半路给搞丢了，因为网络问题啥的，都有可能。</p><p>此时可以选择用 RabbitMQ 提供的事务功能，就是生产者发送数据之前开启 RabbitMQ 事务 <code>channel.txSelect</code> ，然后发送消息，如果消息没有成功被 RabbitMQ 接收到，那么生产者会收到异常报错，此时就可以回滚事务 <code>channel.txRollback</code> ，然后重试发送消息；如果收到了消息，那么可以提交事务 <code>channel.txCommit</code> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 开启事务</span><br><span class="line">channel.txSelect</span><br><span class="line">try &#123;</span><br><span class="line">    // 这里发送消息</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    channel.txRollback</span><br><span class="line"></span><br><span class="line">    // 这里再次重发这条消息</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 提交事务</span><br><span class="line">channel.txCommit</span><br></pre></td></tr></table></figure><p>但是问题是，RabbitMQ 事务机制（同步）一搞，基本上<strong>吞吐量会下来，因为太耗性能</strong>。</p><p>所以一般来说，如果你要确保说写 RabbitMQ 的消息别丢，可以开启 <code>confirm</code> 模式，在生产者那里设置开启 confirm 模式之后，你每次写的消息都会分配一个唯一的 <code>id</code>，然后如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个 <code>ack</code> 消息，告诉你说这个消息 ok 了。如果 RabbitMQ 没能处理这个消息，会回调你的一个 <code>nack</code> 接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息 id 的状态，如果超过一定时间还没接收到这个消息的回调，那么你可以重发。</p><p>事务机制和 <code>confirm</code> 机制最大的不同在于，事务机制是同步的，你提交一个事务之后会阻塞在那儿，但是 <code>confirm</code> 机制是异步的，你发送个消息之后就可以发送下一个消息，然后那个消息 RabbitMQ 接收了之后会异步回调你的一个接口通知你这个消息接收到了。</p><p>所以一般在生产者这块避免数据丢失，都是用 <code>confirm</code> 机制的。</p><h2 id="RabbitMQ-弄丢了数据"><a href="#RabbitMQ-弄丢了数据" class="headerlink" title="RabbitMQ 弄丢了数据"></a>RabbitMQ 弄丢了数据</h2><p>就是 RabbitMQ 自己弄丢了数据，这个你必须开启 RabbitMQ 的持久化，就是消息写入之后会持久化到磁盘，哪怕是 RabbitMQ 自己挂了，恢复之后会自动读取之前存储的数据，一般数据不会丢。除非极其罕见的是，RabbitMQ 还没持久化，自己就挂了，可能导致少量数据丢失，但是这个概率较小。</p><p>设置持久化有两个步骤：</p><ul><li>创建 queue 的时候将其设置为持久化。这样就可以保证 RabbitMQ 持久化 queue 的元数据，但是它是不会持久化 queue 里的数据的。</li><li>第二个是发送消息的时候将消息的 deliveryMode 设置为 2。就是将消息设置为持久化的，此时 RabbitMQ 就会将消息持久化到磁盘上去。</li></ul><p>必须要同时设置这两个持久化才行，RabbitMQ 哪怕是挂了，再次重启，也会从磁盘上重启恢复 queue，恢复这个 queue 里的数据。</p><p>注意，哪怕是你给 RabbitMQ 开启了持久化机制，也有一种可能，就是这个消息写到了 RabbitMQ 中，但是还没来得及持久化到磁盘上，结果不巧，此时 RabbitMQ 挂了，就会导致内存里的一点点数据丢失。</p><p>所以，持久化可以跟生产者那边的 <code>confirm</code> 机制配合起来，只有消息被持久化到磁盘之后，才会通知生产者 <code>ack</code> 了，所以哪怕是在持久化到磁盘之前，RabbitMQ 挂了，数据丢了，生产者收不到 <code>ack</code> ，你也是可以自己重发的。</p><h2 id="消费端弄丢了数据"><a href="#消费端弄丢了数据" class="headerlink" title="消费端弄丢了数据"></a>消费端弄丢了数据</h2><p>RabbitMQ 如果丢失了数据，主要是因为你消费的时候，刚消费到，还没处理，结果进程挂了，比如重启了，那么就尴尬了，RabbitMQ 认为你都消费了，这数据就丢了。</p><p>这个时候得用 RabbitMQ 提供的 ack 机制，简单来说，就是你必须关闭 RabbitMQ 的自动 ack ，可以通过一个 api 来调用就行，然后每次你自己代码里确保处理完的时候，再在程序里 ack 一把。这样的话，如果你还没处理完，不就没有 ack 了？那 RabbitMQ 就认为你还没处理完，这个时候 RabbitMQ 会把这个消费分配给别的 consumer 去处理，消息是不会丢的。</p><h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><h2 id="消费端弄丢了数据-1"><a href="#消费端弄丢了数据-1" class="headerlink" title="消费端弄丢了数据"></a>消费端弄丢了数据</h2><p>唯一可能导致消费者弄丢数据的情况，就是说，你消费到了这个消息，然后消费者那边自动提交了 offset，让 Kafka 以为你已经消费好了这个消息，但其实你才刚准备处理这个消息，你还没处理，你自己就挂了，此时这条消息就丢咯。</p><p>这不是跟 RabbitMQ 差不多吗，大家都知道 Kafka 会自动提交 offset，那么只要关闭自动提交 offset，在处理完之后自己手动提交 offset，就可以保证数据不会丢。但是此时确实还是可能会有重复消费，比如你刚处理完，还没提交 offset，结果自己挂了，此时肯定会重复消费一次，自己保证幂等性就好了。</p><p>生产环境碰到的一个问题，就是说我们的 Kafka 消费者消费到了数据之后是写到一个内存的 queue 里先缓冲一下，结果有的时候，你刚把消息写入内存 queue，然后消费者会自动提交 offset。然后此时我们重启了系统，就会导致内存 queue 里还没来得及处理的数据就丢失了。</p><h2 id="Kafka-弄丢了数据"><a href="#Kafka-弄丢了数据" class="headerlink" title="Kafka 弄丢了数据"></a>Kafka 弄丢了数据</h2><p>这块比较常见的一个场景，就是 Kafka 某个 broker 宕机，然后重新选举 partition 的 leader。大家想想，要是此时其他的 follower 刚好还有些数据没有同步，结果此时 leader 挂了，然后选举某个 follower 成 leader 之后，不就少了一些数据？这就丢了一些数据啊。</p><p>生产环境也遇到过，我们也是，之前 Kafka 的 leader 机器宕机了，将 follower 切换为 leader 之后，就会发现说这个数据就丢了。</p><p>所以此时一般是要求起码设置如下 4 个参数：</p><p>给 topic 设置 replication.factor 参数：这个值必须大于 1，要求每个 partition 必须有至少 2 个副本。<br>在 Kafka 服务端设置 min.insync.replicas 参数：这个值必须大于 1，这个是要求一个 leader 至少感知到有至少一个 follower 还跟自己保持联系，没掉队，这样才能确保 leader 挂了还有一个 follower 吧。<br>在 producer 端设置 acks&#x3D;all ：这个是要求每条数据，必须是写入所有 replica 之后，才能认为是写成功了。<br>在 producer 端设置 retries&#x3D;MAX （很大很大很大的一个值，无限次重试的意思）：这个是要求一旦写入失败，就无限重试，卡在这里了。<br>我们生产环境就是按照上述要求配置的，这样配置之后，至少在 Kafka broker 端就可以保证在 leader 所在 broker 发生故障，进行 leader 切换时，数据不会丢失。</p><h2 id="生产者会不会弄丢数据？"><a href="#生产者会不会弄丢数据？" class="headerlink" title="生产者会不会弄丢数据？"></a>生产者会不会弄丢数据？</h2><p>如果按照上述的思路设置了 acks&#x3D;all ，一定不会丢，要求是，你的 leader 接收到消息，所有的 follower 都同步到了消息之后，才认为本次写成功了。如果没满足这个条件，生产者会自动不断的重试，重试无限次。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 消息中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘扩容</title>
      <link href="/2022/04/16/%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/"/>
      <url>/2022/04/16/%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="案例-如何磁盘扩容"><a href="#案例-如何磁盘扩容" class="headerlink" title="[案例]如何磁盘扩容"></a>[案例]如何磁盘扩容</h1><blockquote><p>背景：日常工作中经常会遇到磁盘空间不足的情况，在服务器磁盘不足的情况中通常使用最快以及最灵活的lvm扩容方式进行</p></blockquote><blockquote><p>问题：如何通过lvm扩容磁盘，一般形式通过fdisk初始化挂载硬盘，然后通过pvc及vge相关命令进行相关磁盘格式处理，最后完成挂载</p></blockquote><ul><li><p>处理方法 通过fdisk命令初始化挂载的硬盘（fdisk &#x2F;dev&#x2F;vda）并且输入n进入新增磁盘步骤。Partition type部分输入p新增磁盘，随后进入选择分区号，可以直接回车默认分区号（此时需记录对应分区号，后面找磁盘方便），紧接着进入扇区编辑步骤，可根据需要扩容大小分配起始扇区及last扇区，完成后此两数值差为此磁盘大小。完成以上步骤后输入w保存所有操作，如操作过程有误可按ctrl c退出命令不保存相关操作。至此为之已完成磁盘初始化，此时需重启电脑重新挂载该磁盘生效相关配置。重启完毕后可以通过lsblk或者df -h找到分区后磁盘名字如vda3,此时可通过pvcreate 对应磁盘名字（&#x2F;dev&#x2F;vda3）进行pv创建。创建完毕后需查看需扩容磁盘所属group，查询完毕后通过命令vgextend创建vg（vgextend centos（此为查询得到的group） &#x2F;dev&#x2F;vda3）。挂载完毕后可通过命令lvdisplay查看所有lvm状态。查看之后通过命令lvextend将新磁盘挂载入需扩容磁盘同一目录（lvextend &#x2F;dev&#x2F;centos&#x2F;home（此为需扩容磁盘目录） &#x2F;dev&#x2F;vda3（此为新建磁盘） -L +900G（此为需要扩容的对应磁盘大小））。完成后通过命令xfs_growfs刷新磁盘（xfs_growfs &#x2F;dev&#x2F;mapper&#x2F;centos-home（此为需扩容磁盘目录））。至此完成磁盘扩容所有步骤，可再次通过命令lsblk或df -h查看磁盘大小。</p></li><li><p>问题思考:<br>由于lvm方式扩容简单且灵活，但一旦磁盘出现故障很难进行恢复或拆分等操作，因此该模式也存在一定风险，所以对于重要服务器一般创建磁盘时就需分配足够磁盘空间，同时定时做好备份。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
